. "${GRIMOIRE}/FUNCTIONS"
           SPELL="cbindgen"
if [[ "${CBINDGEN_BRANCH}" == "scm" ]]; then
         VERSION="$(get_scm_version)"
          SOURCE="${SPELL}-git.tar.bz2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-git"
      SOURCE_URL="git://github.com/egrion/${SPELL}:${SPELL}-git"
   SOURCE_IGNORE="volatile"
  FORCE_DOWNLOAD="on"
else
         VERSION="0.14.3"
     SOURCE_HASH="sha512:bb065c08d724f726ed7276353ca960f243825851899425825353e27a1a6285e41c2b915c5d9e2c12829121e5d8463615cc2fa1cfa3c74f53f09ead213c2e01dc"
          SOURCE="${SPELL}-${VERSION}.tar.gz"
   SOURCE_URL[0]="https://github.com/eqrion/${SPELL}/archive/v${VERSION}.tar.gz"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
fi
        WEB_SITE="https://docs.rs/cbindgen"
      LICENSE[0]="MPL"
         ENTERED="20181022"
           SHORT="a tool to generate C bindings for Rust code"
cat << EOF
This project can be used to generate C bindings for Rust code. It is currently
being developed to support creating bindings for WebRender, but has been
designed to support any project.

Features

  * Builds bindings for a crate, its mods, its dependent crates, and their mods
  * Only the necessary types for exposed functions are given bindings
  * Can specify annotations for controlling some aspects of binding
  * Support for generic structs and unions
  * Support for exporting constants and statics
  * Customizable formatting, can be used in C or C++ projects
  * Support for generating `#ifdef`'s for `#[cfg]` attributes
  * Support for `#[repr(sized)]` tagged enum's
EOF
