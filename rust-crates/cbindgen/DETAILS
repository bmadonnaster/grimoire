. "${GRIMOIRE}/FUNCTIONS"
           SPELL="cbindgen"
if [[ "${CBINDGEN_BRANCH}" == "scm" ]]; then
         VERSION="$(get_scm_version)"
          SOURCE="${SPELL}-git.tar.bz2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-git"
      SOURCE_URL="git://github.com/egrion/${SPELL}:${SPELL}-git"
   SOURCE_IGNORE="volatile"
  FORCE_DOWNLOAD="on"
else
# The sources consist of the upstream tarball and a cargo tarball which is the
# result of running
# CARGO_HOME=$PWD/.cargo cargo fetch
# tar -czf $(basename $PWD)-cargo.tar.gz .cargo Cargo.lock
# in the cbindgen source directory.
#
# With the non-scm branch, we want offline builds.
#
         VERSION="0.17.0"
          SOURCE="${SPELL}-${VERSION}.tar.gz"
         SOURCE2="${SPELL}-${VERSION}-cargo.tar.gz"
     SOURCE_HASH="sha512:7e1a9867c10bb85f55923084c69c2ac65b03fd805bc0729c3999148178eb51e204de47e1e6f9cdd260d6b2df7b8dab30b7029c5c15db2a7c601c58dca06706e7"
    SOURCE2_HASH="sha512:2178e2ddcb4a3b03893cb79938af6621a7ab59a235b7a9458e55df1fab6a24cc8b5ed16aec674460ac52986b4699e60b551b8645e0eafda3ee93628194351282"
   SOURCE_URL[0]="https://github.com/eqrion/${SPELL}/archive/v${VERSION}.tar.gz"
   SOURCE2_URL[0]="https://smgl.bandrate.org/${SOURCE2}"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
fi
        WEB_SITE="https://docs.rs/cbindgen"
      LICENSE[0]="MPL"
         ENTERED="20181022"
           SHORT="a tool to generate C bindings for Rust code"
cat << EOF
This project can be used to generate C bindings for Rust code. It is currently
being developed to support creating bindings for WebRender, but has been
designed to support any project.

Features

  * Builds bindings for a crate, its mods, its dependent crates, and their mods
  * Only the necessary types for exposed functions are given bindings
  * Can specify annotations for controlling some aspects of binding
  * Support for generic structs and unions
  * Support for exporting constants and statics
  * Customizable formatting, can be used in C or C++ projects
  * Support for generating `#ifdef`'s for `#[cfg]` attributes
  * Support for `#[repr(sized)]` tagged enum's
EOF
