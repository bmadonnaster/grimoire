           SPELL="go"
         VERSION=1.15.7
BOOTSTRAP_VERSION=1.15.7
          SOURCE="${SPELL}${VERSION}.src.tar.gz"
     SOURCE_HASH=sha512:7b3e8bcd2fc95baad41f8b5f0456c009e01896d160e65c2670d51c23d8cfcf7a6801e831e6f9a8877fe58c8f54ac8f75bf6e7935b38ba7aaa51dc8e46cf76ddb
   SOURCE_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE"
         SOURCE2="${SPELL}${BOOTSTRAP_VERSION}.linux-amd64.tar.gz"
    SOURCE2_HASH=sha512:90418db94a22131b4b0220a7caea6a23eb1d8e17772549a6d414e98af53d4d836ec1c221cda060a971187ad0d08dbf3d91963a8d848ca4a3b529b044161351b6
  SOURCE2_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}"
        DOC_DIRS=""
        WEB_SITE="http://golang.org"
         ENTERED="20100509"
      LICENSE[0]="BSD"
           SHORT="a systems programming language;
expressive, concurrent, garbage-collected."
cat << EOF
Go is simple.
Go is type safe and memory safe.  Go has pointers but no pointer
arithmetic.  For random access, use slices, which know their limits.
Go promotes writing systems and servers as sets of lightweight
communicating processes, called goroutines, with strong support from
the language.  Run thousands of goroutines if you wantâ€”and say
good-bye to stack overflows.
Go has fast builds, clean syntax, garbage collection, methods for any
type, and run-time reflection.  It feels like a dynamic language but
has the speed and safety of a static language.  It's a joy to use.
EOF
