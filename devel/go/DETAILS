           SPELL="go"
         VERSION=1.9.2
BOOTSTRAP_VERSION=1.9.2
          SOURCE="${SPELL}${VERSION}.src.tar.gz"
     SOURCE_HASH=sha512:1034098575c317eeaf648629690a4dea0c479a69c3b80d9917f6b96c8781ce79c0f29859f667dc4e07d47a44972aa09bd0163a458f897cf45f9d09eb03e4abb5
   SOURCE_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE"
         SOURCE2="${SPELL}${BOOTSTRAP_VERSION}.linux-amd64.tar.gz"
    SOURCE2_HASH=sha512:1f390d7e24fa4e61f5c82283153f7aee7c96d5b9ef4026bfff3b6f6fcba336e87877cc0d6136b48eb4e6931168343f7b5b491a5415a1c0d872fb3c7941e8d642
  SOURCE2_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}"
        DOC_DIRS=""
        WEB_SITE="http://golang.org"
         ENTERED="20100509"
      LICENSE[0]="BSD"
           SHORT="a systems programming language;
expressive, concurrent, garbage-collected."
cat << EOF
Go is simple.
Go is type safe and memory safe.  Go has pointers but no pointer
arithmetic.  For random access, use slices, which know their limits.
Go promotes writing systems and servers as sets of lightweight
communicating processes, called goroutines, with strong support from
the language.  Run thousands of goroutines if you wantâ€”and say
good-bye to stack overflows.
Go has fast builds, clean syntax, garbage collection, methods for any
type, and run-time reflection.  It feels like a dynamic language but
has the speed and safety of a static language.  It's a joy to use.
EOF
