           SPELL="go"
         VERSION=1.14.6
BOOTSTRAP_VERSION=1.14.6
          SOURCE="${SPELL}${VERSION}.src.tar.gz"
     SOURCE_HASH=sha512:5c865c8272fb0dc8eab1514732b0200dbc867276512714dd30afc658a0d2afac6bd758e00c6f576d8d254e411418a52a564c895399b56cfe06c2b1785271a8fd
   SOURCE_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE"
         SOURCE2="${SPELL}${BOOTSTRAP_VERSION}.linux-amd64.tar.gz"
    SOURCE2_HASH=sha512:9f95df882ed11f37c8974993b89a178e096bd6c2af4775042249834e9646f9ea69e030e1ad664a455f719b630d58010d63ec2a920deff8669586522bd3ffbf76
  SOURCE2_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}"
        DOC_DIRS=""
        WEB_SITE="http://golang.org"
         ENTERED="20100509"
      LICENSE[0]="BSD"
           SHORT="a systems programming language;
expressive, concurrent, garbage-collected."
cat << EOF
Go is simple.
Go is type safe and memory safe.  Go has pointers but no pointer
arithmetic.  For random access, use slices, which know their limits.
Go promotes writing systems and servers as sets of lightweight
communicating processes, called goroutines, with strong support from
the language.  Run thousands of goroutines if you wantâ€”and say
good-bye to stack overflows.
Go has fast builds, clean syntax, garbage collection, methods for any
type, and run-time reflection.  It feels like a dynamic language but
has the speed and safety of a static language.  It's a joy to use.
EOF
