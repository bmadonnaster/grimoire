           SPELL="go"
         VERSION=1.15.3
BOOTSTRAP_VERSION=1.15.3
          SOURCE="${SPELL}${VERSION}.src.tar.gz"
     SOURCE_HASH=sha512:883fb327ce8aec77381aaa01e95acd0826c74d56a769d2077449b964411e30a5844117fdd941737015983c451a3e8d419bd40954842b199a09c26704577b5bca
   SOURCE_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE"
         SOURCE2="${SPELL}${BOOTSTRAP_VERSION}.linux-amd64.tar.gz"
    SOURCE2_HASH=sha512:85007dec7ca582e262dba97c24261e99ca387ed2500e86999d5170aad70d39abe27f270f61d00de4a6727b8009900e2bee20c8086a7dfeb5fe484b65758002a9
  SOURCE2_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}"
        DOC_DIRS=""
        WEB_SITE="http://golang.org"
         ENTERED="20100509"
      LICENSE[0]="BSD"
           SHORT="a systems programming language;
expressive, concurrent, garbage-collected."
cat << EOF
Go is simple.
Go is type safe and memory safe.  Go has pointers but no pointer
arithmetic.  For random access, use slices, which know their limits.
Go promotes writing systems and servers as sets of lightweight
communicating processes, called goroutines, with strong support from
the language.  Run thousands of goroutines if you wantâ€”and say
good-bye to stack overflows.
Go has fast builds, clean syntax, garbage collection, methods for any
type, and run-time reflection.  It feels like a dynamic language but
has the speed and safety of a static language.  It's a joy to use.
EOF
