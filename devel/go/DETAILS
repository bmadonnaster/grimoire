           SPELL="go"
         VERSION=1.9.5
BOOTSTRAP_VERSION=1.9.5
          SOURCE="${SPELL}${VERSION}.src.tar.gz"
     SOURCE_HASH=sha512:5cde6a3c6e6040ddbcafa75dae551500d0bb15096a523ee29f788cbf3fa11d083d4e4a1b56a094ad2234f967c0d1be280ae00479d5f7c01174dc6da2a5a25924
   SOURCE_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE"
         SOURCE2="${SPELL}${BOOTSTRAP_VERSION}.linux-amd64.tar.gz"
    SOURCE2_HASH=sha512:770a217c30e7e8db74c230a6f33a35abdb3c4f63c7179da3a66d324dd3d8d3694c6dddd99fd6895dc9ff909e3670d7c84f1b605596000d0eb2b94c8119922c31
  SOURCE2_URL[0]="https://redirector.gvt1.com/edgedl/go/$SOURCE2"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}"
        DOC_DIRS=""
        WEB_SITE="http://golang.org"
         ENTERED="20100509"
      LICENSE[0]="BSD"
           SHORT="a systems programming language;
expressive, concurrent, garbage-collected."
cat << EOF
Go is simple.
Go is type safe and memory safe.  Go has pointers but no pointer
arithmetic.  For random access, use slices, which know their limits.
Go promotes writing systems and servers as sets of lightweight
communicating processes, called goroutines, with strong support from
the language.  Run thousands of goroutines if you wantâ€”and say
good-bye to stack overflows.
Go has fast builds, clean syntax, garbage collection, methods for any
type, and run-time reflection.  It feels like a dynamic language but
has the speed and safety of a static language.  It's a joy to use.
EOF
