default_pre_build &&
if [[ "$LLVM_WITH_CLANG" == y ]]; then
  cd ${SOURCE_DIRECTORY}/projects &&
  unpack_file 5 &&
  mv compiler-rt-${VERSION}.src compiler-rt &&

  cd ${SOURCE_DIRECTORY}/tools &&
  unpack_file 3 &&
  mv cfe-${VERSION}.src clang &&
  cd "${SOURCE_DIRECTORY}/tools/clang/tools" &&
  unpack_file 9 &&
  mv clang-tools-extra-${VERSION}.src extra &&
  cd "${SOURCE_DIRECTORY}" &&
  patch -p1 < "${SPELL_DIRECTORY}/0001-fix-compile-error-clang.patch"
#  cd ${SOURCE_DIRECTORY}/tools/clang &&
#  patch -p1 < $SPELL_DIRECTORY/0001-fix-scan-view-s-module-search-path.patch &&
#  sedit '
#	s:$RealBin/sorttable.js:/usr/share/llvm/scan-build/sorttable.js:
#	s:$RealBin/scanview.css:/usr/share/llvm/scan-build/scanview.css:
#  ' tools/scan-build/scan-build
fi &&

if [[ "$LLVM_WITH_LLDB" == y ]]; then
  cd ${SOURCE_DIRECTORY}/tools &&
  unpack_file 7                &&
  mv lldb-${VERSION}.src lldb
fi &&

if [[ "$LLVM_WITH_POLLY" == y ]]; then
  cd ${SOURCE_DIRECTORY}/tools &&
  unpack_file 11                &&
  mv polly-${VERSION}.src polly
fi &&

if [[ "$LLVM_WITH_LLD" == y ]]; then
  cd ${SOURCE_DIRECTORY}/tools &&
  unpack_file 13               &&
  mv lld-${VERSION}.src lld
fi &&

# small cmake related fix for libffi
cd ${SOURCE_DIRECTORY} &&
if spell_ok libffi;then
  FFI=`pkg-config --cflags-only-I libffi` &&
  FFI=${FFI//-I/} &&
  FFI=${FFI//\ */} &&
  sed -i "/FFI_I/s|\"\"|\"$FFI\"|" "${SOURCE_DIRECTORY}/CMakeLists.txt"
fi  &&

if is_depends_enabled $SPELL python3;then
  cd utils/llvm-build/llvmbuild &&
  2to3 --no-diffs -wn .
fi &&
# do not build all backends
sed -i "/^set.*all\"$/s/all//"  "${SOURCE_DIRECTORY}/CMakeLists.txt" &&

cd "${SOURCE_DIRECTORY}" &&
patch -p1 < "${SPELL_DIRECTORY}/0001-fix-compile-error.patch"
