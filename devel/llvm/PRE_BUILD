default_pre_build &&
cd "$SOURCE_DIRECTORY" &&
if [[ "$LLVM_WITH_CLANG" == y ]]; then
  unpack_file 5 &&
  mv compiler-rt-${VERSION}.src projects/compiler-rt &&
  unpack_file 3 &&
  mv cfe-${VERSION}.src tools/clang &&
  unpack_file 9 &&
  mv clang-tools-extra-${VERSION}.src tools/clang/tools/extra &&
  # disable sanitizers on musl
  case "$HOST" in *-musl)
    sedit '/^ *set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE/s/TRUE/FALSE/' \
        projects/compiler-rt/cmake/config-ix.cmake
    ;;
  esac &&
  patch -p1 < "${SPELL_DIRECTORY}/0001-fix-compile-error-clang.patch"
#  cd ${SOURCE_DIRECTORY}/tools/clang &&
#  patch -p1 < $SPELL_DIRECTORY/0001-fix-scan-view-s-module-search-path.patch &&
#  sedit '
#	s:$RealBin/sorttable.js:/usr/share/llvm/scan-build/sorttable.js:
#	s:$RealBin/scanview.css:/usr/share/llvm/scan-build/scanview.css:
#  ' tools/scan-build/scan-build
fi &&

if [[ "$LLVM_WITH_LLDB" == y ]]; then
  unpack_file 7                &&
  mv lldb-${VERSION}.src tools/lldb
fi &&

if [[ "$LLVM_WITH_POLLY" == y ]]; then
  unpack_file 11                &&
  mv polly-${VERSION}.src tools/polly
fi &&

if [[ "$LLVM_WITH_LLD" == y ]]; then
  unpack_file 13               &&
  mv lld-${VERSION}.src tools/lld
fi &&

# small cmake related fix for libffi
if spell_ok libffi;then
  FFI=`pkg-config --cflags-only-I libffi` &&
  FFI=${FFI//-I/} &&
  FFI=${FFI//\ */} &&
  sed -i "/FFI_I/s|\"\"|\"$FFI\"|" CMakeLists.txt
fi  &&

# do not build all backends
sed -i "/^set.*all\"$/s/all//"  CMakeLists.txt &&

patch -p1 < "${SPELL_DIRECTORY}/0001-fix-compile-error.patch"
