From 30e55f40b4511d3c19c1403cef03ffcb11251a0d Mon Sep 17 00:00:00 2001
From: Florian Franzmann <siflfran@hawo.stw.uni-erlangen.de>
Date: Sat, 28 Mar 2020 22:15:01 +0100
Subject: [PATCH] fix compile error

---
 include/llvm/MC/MCObjectFileInfo.h | 2 +-
 lib/MC/MCObjectFileInfo.cpp        | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/llvm/MC/MCObjectFileInfo.h b/include/llvm/MC/MCObjectFileInfo.h
index 2f7f5d64..9bca644e 100644
--- a/include/llvm/MC/MCObjectFileInfo.h
+++ b/include/llvm/MC/MCObjectFileInfo.h
@@ -217,7 +217,7 @@ protected:
   MCSection *GLJMPSection = nullptr;
 
 public:
-  void InitMCObjectFileInfo(const Triple &TT, bool PIC, MCContext &ctx,
+  void InitMCObjectFileInfo(const Triple &TT, bool pic, MCContext &ctx,
                             bool LargeCodeModel = false);
 
   bool getSupportsWeakOmittedEHFrame() const {
diff --git a/lib/MC/MCObjectFileInfo.cpp b/lib/MC/MCObjectFileInfo.cpp
index d567cc14..a2e1b598 100644
--- a/lib/MC/MCObjectFileInfo.cpp
+++ b/lib/MC/MCObjectFileInfo.cpp
@@ -797,10 +797,10 @@ void MCObjectFileInfo::initXCOFFMCObjectFileInfo(const Triple &T) {
       XCOFF::C_HIDEXT, SectionKind::getReadOnly());
 }
 
-void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool PIC,
+void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool pic,
                                             MCContext &ctx,
                                             bool LargeCodeModel) {
-  PositionIndependent = PIC;
+  PositionIndependent = pic;
   Ctx = &ctx;
 
   // Common.
diff --git a/include/llvm/IR/PassTimingInfo.h b/include/llvm/IR/PassTimingInfo.h
index b8d8f117..a20ede69 100644
--- a/include/llvm/IR/PassTimingInfo.h
+++ b/include/llvm/IR/PassTimingInfo.h
@@ -84,7 +84,7 @@ public:
   TimePassesHandler(const TimePassesHandler &) = delete;
   void operator=(const TimePassesHandler &) = delete;
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
   /// Set a custom output stream for subsequent reporting.
   void setOutStream(raw_ostream &OutStream);
diff --git a/include/llvm/Passes/PassBuilder.h b/include/llvm/Passes/PassBuilder.h
index e7db8fd4..1ecb569d 100644
--- a/include/llvm/Passes/PassBuilder.h
+++ b/include/llvm/Passes/PassBuilder.h
@@ -111,7 +111,7 @@ class PassBuilder {
   TargetMachine *TM;
   PipelineTuningOptions PTO;
   Optional<PGOOptions> PGOOpt;
-  PassInstrumentationCallbacks *PIC;
+  PassInstrumentationCallbacks *pic;
 
 public:
   /// A struct to capture parsed pass pipeline names.
@@ -224,8 +224,8 @@ public:
   explicit PassBuilder(TargetMachine *TM = nullptr,
                        PipelineTuningOptions PTO = PipelineTuningOptions(),
                        Optional<PGOOptions> PGOOpt = None,
-                       PassInstrumentationCallbacks *PIC = nullptr)
-      : TM(TM), PTO(PTO), PGOOpt(PGOOpt), PIC(PIC) {}
+                       PassInstrumentationCallbacks *pic = nullptr)
+      : TM(TM), PTO(PTO), PGOOpt(PGOOpt), pic(pic) {}
 
   /// Cross register the analysis managers through their proxies.
   ///
@@ -635,7 +635,7 @@ public:
   /// Returns PIC. External libraries can use this to register pass
   /// instrumentation callbacks.
   PassInstrumentationCallbacks *getPassInstrumentationCallbacks() const {
-    return PIC;
+    return pic;
   }
 
 private:
diff --git a/include/llvm/Passes/StandardInstrumentations.h b/include/llvm/Passes/StandardInstrumentations.h
index 3d3002ee..eed17ffb 100644
--- a/include/llvm/Passes/StandardInstrumentations.h
+++ b/include/llvm/Passes/StandardInstrumentations.h
@@ -35,7 +35,7 @@ public:
   PrintIRInstrumentation() = default;
   ~PrintIRInstrumentation();
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
 private:
   bool printBeforePass(StringRef PassID, Any IR);
@@ -62,7 +62,7 @@ class StandardInstrumentations {
 public:
   StandardInstrumentations() = default;
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
   TimePassesHandler &getTimePasses() { return TimePasses; }
 };
diff --git a/lib/IR/PassTimingInfo.cpp b/lib/IR/PassTimingInfo.cpp
index 9cc44ea0..adad789c 100644
--- a/lib/IR/PassTimingInfo.cpp
+++ b/lib/IR/PassTimingInfo.cpp
@@ -259,19 +259,19 @@ void TimePassesHandler::runAfterPass(StringRef PassID) {
   LLVM_DEBUG(dump());
 }
 
-void TimePassesHandler::registerCallbacks(PassInstrumentationCallbacks &PIC) {
+void TimePassesHandler::registerCallbacks(PassInstrumentationCallbacks &pic) {
   if (!Enabled)
     return;
 
-  PIC.registerBeforePassCallback(
+  pic.registerBeforePassCallback(
       [this](StringRef P, Any) { return this->runBeforePass(P); });
-  PIC.registerAfterPassCallback(
+  pic.registerAfterPassCallback(
       [this](StringRef P, Any) { this->runAfterPass(P); });
-  PIC.registerAfterPassInvalidatedCallback(
+  pic.registerAfterPassInvalidatedCallback(
       [this](StringRef P) { this->runAfterPass(P); });
-  PIC.registerBeforeAnalysisCallback(
+  pic.registerBeforeAnalysisCallback(
       [this](StringRef P, Any) { this->runBeforePass(P); });
-  PIC.registerAfterAnalysisCallback(
+  pic.registerAfterAnalysisCallback(
       [this](StringRef P, Any) { this->runAfterPass(P); });
 }
 
diff --git a/lib/LTO/LTOBackend.cpp b/lib/LTO/LTOBackend.cpp
index dcde7277..d2ecd661 100644
--- a/lib/LTO/LTOBackend.cpp
+++ b/lib/LTO/LTOBackend.cpp
@@ -169,10 +169,10 @@ static void runNewPMPasses(const Config &Conf, Module &Mod, TargetMachine *TM,
                         PGOOptions::IRUse, PGOOptions::CSIRUse);
   }
 
-  PassInstrumentationCallbacks PIC;
+  PassInstrumentationCallbacks pic;
   StandardInstrumentations SI;
-  SI.registerCallbacks(PIC);
-  PassBuilder PB(TM, Conf.PTO, PGOOpt, &PIC);
+  SI.registerCallbacks(pic);
+  PassBuilder PB(TM, Conf.PTO, PGOOpt, &pic);
   AAManager AA;
 
   // Parse a custom AA pipeline if asked to.
diff --git a/lib/Passes/PassRegistry.def b/lib/Passes/PassRegistry.def
index 355dd6f9..a5e8e914 100644
--- a/lib/Passes/PassRegistry.def
+++ b/lib/Passes/PassRegistry.def
@@ -25,7 +25,7 @@ MODULE_ANALYSIS("no-op-module", NoOpModuleAnalysis())
 MODULE_ANALYSIS("profile-summary", ProfileSummaryAnalysis())
 MODULE_ANALYSIS("stack-safety", StackSafetyGlobalAnalysis())
 MODULE_ANALYSIS("verify", VerifierAnalysis())
-MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 MODULE_ANALYSIS("asan-globals-md", ASanGlobalsMetadataAnalysis())
 
 #ifndef MODULE_ALIAS_ANALYSIS
@@ -99,7 +99,7 @@ MODULE_PASS("poison-checking", PoisonCheckingPass())
 #endif
 CGSCC_ANALYSIS("no-op-cgscc", NoOpCGSCCAnalysis())
 CGSCC_ANALYSIS("fam-proxy", FunctionAnalysisManagerCGSCCProxy())
-CGSCC_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+CGSCC_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 #undef CGSCC_ANALYSIS
 
 #ifndef CGSCC_PASS
@@ -138,7 +138,7 @@ FUNCTION_ANALYSIS("targetlibinfo", TargetLibraryAnalysis())
 FUNCTION_ANALYSIS("targetir",
                   TM ? TM->getTargetIRAnalysis() : TargetIRAnalysis())
 FUNCTION_ANALYSIS("verify", VerifierAnalysis())
-FUNCTION_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+FUNCTION_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 
 #ifndef FUNCTION_ALIAS_ANALYSIS
 #define FUNCTION_ALIAS_ANALYSIS(NAME, CREATE_PASS)                             \
@@ -291,7 +291,7 @@ LOOP_ANALYSIS("no-op-loop", NoOpLoopAnalysis())
 LOOP_ANALYSIS("access-info", LoopAccessAnalysis())
 LOOP_ANALYSIS("ddg", DDGAnalysis())
 LOOP_ANALYSIS("ivusers", IVUsersAnalysis())
-LOOP_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+LOOP_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 #undef LOOP_ANALYSIS
 
 #ifndef LOOP_PASS
diff --git a/lib/Passes/StandardInstrumentations.cpp b/lib/Passes/StandardInstrumentations.cpp
index 5cf0ca8e..dffd8b3e 100644
--- a/lib/Passes/StandardInstrumentations.cpp
+++ b/lib/Passes/StandardInstrumentations.cpp
@@ -219,24 +219,24 @@ void PrintIRInstrumentation::printAfterPassInvalidated(StringRef PassID) {
 }
 
 void PrintIRInstrumentation::registerCallbacks(
-    PassInstrumentationCallbacks &PIC) {
+    PassInstrumentationCallbacks &pic) {
   // BeforePass callback is not just for printing, it also saves a Module
   // for later use in AfterPassInvalidated.
   StoreModuleDesc = llvm::forcePrintModuleIR() && llvm::shouldPrintAfterPass();
   if (llvm::shouldPrintBeforePass() || StoreModuleDesc)
-    PIC.registerBeforePassCallback(
+    pic.registerBeforePassCallback(
         [this](StringRef P, Any IR) { return this->printBeforePass(P, IR); });
 
   if (llvm::shouldPrintAfterPass()) {
-    PIC.registerAfterPassCallback(
+    pic.registerAfterPassCallback(
         [this](StringRef P, Any IR) { this->printAfterPass(P, IR); });
-    PIC.registerAfterPassInvalidatedCallback(
+    pic.registerAfterPassInvalidatedCallback(
         [this](StringRef P) { this->printAfterPassInvalidated(P); });
   }
 }
 
 void StandardInstrumentations::registerCallbacks(
-    PassInstrumentationCallbacks &PIC) {
-  PrintIR.registerCallbacks(PIC);
-  TimePasses.registerCallbacks(PIC);
+    PassInstrumentationCallbacks &pic) {
+  PrintIR.registerCallbacks(pic);
+  TimePasses.registerCallbacks(pic);
 }
diff --git a/lib/Transforms/Scalar/LICM.cpp b/lib/Transforms/Scalar/LICM.cpp
index a1c012fd..91e69a79 100644
--- a/lib/Transforms/Scalar/LICM.cpp
+++ b/lib/Transforms/Scalar/LICM.cpp
@@ -426,7 +426,7 @@ bool LoopInvariantCodeMotion::runOnLoop(
           MSSAInsertPts.push_back(nullptr);
       }
 
-      PredIteratorCache PIC;
+      PredIteratorCache pic;
 
       bool Promoted = false;
 
@@ -452,7 +452,7 @@ bool LoopInvariantCodeMotion::runOnLoop(
           PointerMustAliases.insert(ASI.getValue());
 
         Promoted |= promoteLoopAccessesToScalars(
-            PointerMustAliases, ExitBlocks, InsertPts, MSSAInsertPts, PIC, LI,
+            PointerMustAliases, ExitBlocks, InsertPts, MSSAInsertPts, pic, LI,
             DT, TLI, L, CurAST.get(), MSSAU.get(), &SafetyInfo, ORE);
       }
 
@@ -1779,13 +1779,13 @@ public:
                const SmallSetVector<Value *, 8> &PMA,
                SmallVectorImpl<BasicBlock *> &LEB,
                SmallVectorImpl<Instruction *> &LIP,
-               SmallVectorImpl<MemoryAccess *> &MSSAIP, PredIteratorCache &PIC,
+               SmallVectorImpl<MemoryAccess *> &MSSAIP, PredIteratorCache &pic,
                AliasSetTracker &ast, MemorySSAUpdater *MSSAU, LoopInfo &li,
                DebugLoc dl, int alignment, bool UnorderedAtomic,
                const AAMDNodes &AATags, ICFLoopSafetyInfo &SafetyInfo)
       : LoadAndStorePromoter(Insts, S), SomePtr(SP), PointerMustAliases(PMA),
         LoopExitBlocks(LEB), LoopInsertPts(LIP), MSSAInsertPts(MSSAIP),
-        PredCache(PIC), AST(ast), MSSAU(MSSAU), LI(li), DL(std::move(dl)),
+        PredCache(pic), AST(ast), MSSAU(MSSAU), LI(li), DL(std::move(dl)),
         Alignment(alignment), UnorderedAtomic(UnorderedAtomic), AATags(AATags),
         SafetyInfo(SafetyInfo) {}
 
@@ -1881,7 +1881,7 @@ bool llvm::promoteLoopAccessesToScalars(
     const SmallSetVector<Value *, 8> &PointerMustAliases,
     SmallVectorImpl<BasicBlock *> &ExitBlocks,
     SmallVectorImpl<Instruction *> &InsertPts,
-    SmallVectorImpl<MemoryAccess *> &MSSAInsertPts, PredIteratorCache &PIC,
+    SmallVectorImpl<MemoryAccess *> &MSSAInsertPts, PredIteratorCache &pic,
     LoopInfo *LI, DominatorTree *DT, const TargetLibraryInfo *TLI,
     Loop *CurLoop, AliasSetTracker *CurAST, MemorySSAUpdater *MSSAU,
     ICFLoopSafetyInfo *SafetyInfo, OptimizationRemarkEmitter *ORE) {
@@ -2122,7 +2122,7 @@ bool llvm::promoteLoopAccessesToScalars(
   SmallVector<PHINode *, 16> NewPHIs;
   SSAUpdater SSA(&NewPHIs);
   LoopPromoter Promoter(SomePtr, LoopUses, SSA, PointerMustAliases, ExitBlocks,
-                        InsertPts, MSSAInsertPts, PIC, *CurAST, MSSAU, *LI, DL,
+                        InsertPts, MSSAInsertPts, pic, *CurAST, MSSAU, *LI, DL,
                         Alignment, SawUnorderedAtomic, AATags, *SafetyInfo);
 
   // Set up the preheader to have a definition of the value.  It is the live-out
diff --git a/lib/Transforms/Utils/PredicateInfo.cpp b/lib/Transforms/Utils/PredicateInfo.cpp
index dda2867f..3ee6d80c 100644
--- a/lib/Transforms/Utils/PredicateInfo.cpp
+++ b/lib/Transforms/Utils/PredicateInfo.cpp
@@ -559,10 +559,10 @@ Value *PredicateInfo::materializeStack(unsigned int &Counter,
       Function *IF = getCopyDeclaration(F.getParent(), Op->getType());
       if (IF->users().empty())
         CreatedDeclarations.insert(IF);
-      CallInst *PIC =
+      CallInst *pic =
           B.CreateCall(IF, Op, Op->getName() + "." + Twine(Counter++));
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     } else {
       auto *PAssume = dyn_cast<PredicateAssume>(ValInfo);
       assert(PAssume &&
@@ -571,9 +571,9 @@ Value *PredicateInfo::materializeStack(unsigned int &Counter,
       Function *IF = getCopyDeclaration(F.getParent(), Op->getType());
       if (IF->users().empty())
         CreatedDeclarations.insert(IF);
-      CallInst *PIC = B.CreateCall(IF, Op);
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      CallInst *pic = B.CreateCall(IF, Op);
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     }
   }
   return RenameStack.back().Def;
diff --git a/tools/llvm-mc/llvm-mc.cpp b/tools/llvm-mc/llvm-mc.cpp
index 6aa347d9..06e2f70a 100644
--- a/tools/llvm-mc/llvm-mc.cpp
+++ b/tools/llvm-mc/llvm-mc.cpp
@@ -131,7 +131,7 @@ MAttrs("mattr",
   cl::desc("Target specific attributes (-mattr=help for details)"),
   cl::value_desc("a1,+a2,-a3,..."));
 
-static cl::opt<bool> PIC("position-independent",
+static cl::opt<bool> pic("position-independent",
                          cl::desc("Position independent"), cl::init(false));
 
 static cl::opt<bool>
@@ -371,7 +371,7 @@ int main(int argc, char **argv) {
   // MCObjectFileInfo needs a MCContext reference in order to initialize itself.
   MCObjectFileInfo MOFI;
   MCContext Ctx(MAI.get(), MRI.get(), &MOFI, &SrcMgr, &MCOptions);
-  MOFI.InitMCObjectFileInfo(TheTriple, PIC, Ctx, LargeCodeModel);
+  MOFI.InitMCObjectFileInfo(TheTriple, pic, Ctx, LargeCodeModel);
 
   if (SaveTempLabels)
     Ctx.setAllowTemporaryLabels(false);
diff --git a/tools/opt/NewPMDriver.cpp b/tools/opt/NewPMDriver.cpp
index ac04a32d..1775b49d 100644
--- a/tools/opt/NewPMDriver.cpp
+++ b/tools/opt/NewPMDriver.cpp
@@ -255,11 +255,11 @@ bool llvm::runPassPipeline(StringRef Arg0, Module &M, TargetMachine *TM,
         P->CSAction = PGOOptions::CSIRUse;
       }
     }
-  PassInstrumentationCallbacks PIC;
+  PassInstrumentationCallbacks pic;
   StandardInstrumentations SI;
-  SI.registerCallbacks(PIC);
+  SI.registerCallbacks(pic);
 
-  PassBuilder PB(TM, PipelineTuningOptions(), P, &PIC);
+  PassBuilder PB(TM, PipelineTuningOptions(), P, &pic);
   registerEPCallbacks(PB, VerifyEachPass, DebugPM);
 
   // Load requested pass plugins and let them register pass builder callbacks
