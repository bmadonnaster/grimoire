From ee4a6fe5c67503dbda7ae1afe7242ee495b2a3ec Mon Sep 17 00:00:00 2001
From: Florian Franzmann <siflfran@hawo.stw.uni-erlangen.de>
Date: Wed, 20 Dec 2017 23:46:41 +0100
Subject: [PATCH] fix compile error

---
 include/llvm/MC/MCObjectFileInfo.h | 2 +-
 lib/MC/MCObjectFileInfo.cpp        | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/llvm/MC/MCObjectFileInfo.h b/include/llvm/MC/MCObjectFileInfo.h
index 4d63444..a571f4a 100644
--- a/include/llvm/MC/MCObjectFileInfo.h
+++ b/include/llvm/MC/MCObjectFileInfo.h
@@ -198,7 +198,7 @@ protected:
   MCSection *SXDataSection;

 public:
-  void InitMCObjectFileInfo(const Triple &TT, bool PIC, MCContext &ctx,
+  void InitMCObjectFileInfo(const Triple &TT, bool pic, MCContext &ctx,
                             bool LargeCodeModel = false);

   bool getSupportsWeakOmittedEHFrame() const {
diff --git a/lib/MC/MCObjectFileInfo.cpp b/lib/MC/MCObjectFileInfo.cpp
index 21c5516..0388986 100644
--- a/lib/MC/MCObjectFileInfo.cpp
+++ b/lib/MC/MCObjectFileInfo.cpp
@@ -854,10 +854,10 @@ void MCObjectFileInfo::initWasmMCObjectF
   // TODO: Define more sections.
 }

-void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool PIC,
+void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool pic,
                                             MCContext &ctx,
                                             bool LargeCodeModel) {
-  PositionIndependent = PIC;
+  PositionIndependent = pic;
   Ctx = &ctx;

   // Common.

From e3e9b1405dcff106ca6547bdd33c605dc4d8ecb8 Mon Sep 17 00:00:00 2001
From: Florian Franzmann <siflfran@hawo.stw.uni-erlangen.de>
Date: Thu, 21 Dec 2017 00:35:48 +0100
Subject: [PATCH] fix compile error

---
 lib/Transforms/Scalar/LICM.cpp         | 12 ++++++------
 lib/Transforms/Utils/PredicateInfo.cpp | 12 ++++++------
 tools/llvm-mc/llvm-mc.cpp              |  4 ++--
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/lib/Transforms/Scalar/LICM.cpp b/lib/Transforms/Scalar/LICM.cpp
index 37b9c4b..19742d2 100644
--- a/lib/Transforms/Scalar/LICM.cpp
+++ b/lib/Transforms/Scalar/LICM.cpp
@@ -416,7 +416,7 @@
           MSSAInsertPts.push_back(nullptr);
       }
 
-      PredIteratorCache PIC;
+      PredIteratorCache pic;
 
       bool Promoted = false;
 
@@ -442,7 +442,7 @@
           PointerMustAliases.insert(ASI.getValue());
 
         Promoted |= promoteLoopAccessesToScalars(
-            PointerMustAliases, ExitBlocks, InsertPts, MSSAInsertPts, PIC, LI,
+            PointerMustAliases, ExitBlocks, InsertPts, MSSAInsertPts, pic, LI,
             DT, TLI, L, CurAST.get(), MSSAU.get(), &SafetyInfo, ORE);
       }
 
@@ -1749,13 +1749,13 @@
                const SmallSetVector<Value *, 8> &PMA,
                SmallVectorImpl<BasicBlock *> &LEB,
                SmallVectorImpl<Instruction *> &LIP,
-               SmallVectorImpl<MemoryAccess *> &MSSAIP, PredIteratorCache &PIC,
+               SmallVectorImpl<MemoryAccess *> &MSSAIP, PredIteratorCache &pic,
                AliasSetTracker &ast, MemorySSAUpdater *MSSAU, LoopInfo &li,
                DebugLoc dl, int alignment, bool UnorderedAtomic,
                const AAMDNodes &AATags, ICFLoopSafetyInfo &SafetyInfo)
       : LoadAndStorePromoter(Insts, S), SomePtr(SP), PointerMustAliases(PMA),
         LoopExitBlocks(LEB), LoopInsertPts(LIP), MSSAInsertPts(MSSAIP),
-        PredCache(PIC), AST(ast), MSSAU(MSSAU), LI(li), DL(std::move(dl)),
+        PredCache(pic), AST(ast), MSSAU(MSSAU), LI(li), DL(std::move(dl)),
         Alignment(alignment), UnorderedAtomic(UnorderedAtomic), AATags(AATags),
         SafetyInfo(SafetyInfo) {}
 
@@ -1851,7 +1851,7 @@
     const SmallSetVector<Value *, 8> &PointerMustAliases,
     SmallVectorImpl<BasicBlock *> &ExitBlocks,
     SmallVectorImpl<Instruction *> &InsertPts,
-    SmallVectorImpl<MemoryAccess *> &MSSAInsertPts, PredIteratorCache &PIC,
+    SmallVectorImpl<MemoryAccess *> &MSSAInsertPts, PredIteratorCache &pic,
     LoopInfo *LI, DominatorTree *DT, const TargetLibraryInfo *TLI,
     Loop *CurLoop, AliasSetTracker *CurAST, MemorySSAUpdater *MSSAU,
     ICFLoopSafetyInfo *SafetyInfo, OptimizationRemarkEmitter *ORE) {
@@ -2091,7 +2091,7 @@
   SmallVector<PHINode *, 16> NewPHIs;
   SSAUpdater SSA(&NewPHIs);
   LoopPromoter Promoter(SomePtr, LoopUses, SSA, PointerMustAliases, ExitBlocks,
-                        InsertPts, MSSAInsertPts, PIC, *CurAST, MSSAU, *LI, DL,
+                        InsertPts, MSSAInsertPts, pic, *CurAST, MSSAU, *LI, DL,
                         Alignment, SawUnorderedAtomic, AATags, *SafetyInfo);
 
   // Set up the preheader to have a definition of the value.  It is the live-out
diff --git a/lib/Transforms/Utils/PredicateInfo.cpp b/lib/Transforms/Utils/PredicateInfo.cpp
index d4cdaed..5fcd5dd 100644
--- a/lib/Transforms/Utils/PredicateInfo.cpp
+++ b/lib/Transforms/Utils/PredicateInfo.cpp
@@ -525,10 +525,10 @@
       Function *IF = getCopyDeclaration(F.getParent(), Op->getType());
       if (IF->user_begin() == IF->user_end())
         CreatedDeclarations.insert(IF);
-      CallInst *PIC =
+      CallInst *pic =
           B.CreateCall(IF, Op, Op->getName() + "." + Twine(Counter++));
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     } else {
       auto *PAssume = dyn_cast<PredicateAssume>(ValInfo);
       assert(PAssume &&
@@ -537,9 +537,9 @@
       Function *IF = getCopyDeclaration(F.getParent(), Op->getType());
       if (IF->user_begin() == IF->user_end())
         CreatedDeclarations.insert(IF);
-      CallInst *PIC = B.CreateCall(IF, Op);
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      CallInst *pic = B.CreateCall(IF, Op);
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     }
   }
   return RenameStack.back().Def;
diff --git a/tools/llvm-mc/llvm-mc.cpp b/tools/llvm-mc/llvm-mc.cpp
index 8782588..c5900ce 100644
--- a/tools/llvm-mc/llvm-mc.cpp
+++ b/tools/llvm-mc/llvm-mc.cpp
@@ -128,7 +128,7 @@ MAttrs("mattr",
   cl::desc("Target specific attributes (-mattr=help for details)"),
   cl::value_desc("a1,+a2,-a3,..."));

-static cl::opt<bool> PIC("position-independent",
+static cl::opt<bool> pic("position-independent",
                          cl::desc("Position independent"), cl::init(false));

 static cl::opt<bool>
@@ -496,7 +496,7 @@ int main(int argc, char **argv) {
   // MCObjectFileInfo needs a MCContext reference in order to initialize itself.
   MCObjectFileInfo MOFI;
   MCContext Ctx(MAI.get(), MRI.get(), &MOFI, &SrcMgr);
-  MOFI.InitMCObjectFileInfo(TheTriple, PIC, Ctx, LargeCodeModel);
+  MOFI.InitMCObjectFileInfo(TheTriple, pic, Ctx, LargeCodeModel);

   if (SaveTempLabels)
     Ctx.setAllowTemporaryLabels(false);
diff --git a/include/llvm/IR/PassTimingInfo.h b/include/llvm/IR/PassTimingInfo.h
--- a/include/llvm/IR/PassTimingInfo.h
+++ b/include/llvm/IR/PassTimingInfo.h
@@ -83,7 +83,7 @@
   TimePassesHandler(const TimePassesHandler &) = delete;
   void operator=(const TimePassesHandler &) = delete;
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
 private:
   /// Dumps information for running/triggered timers, useful for debugging
diff --git a/lib/IR/PassTimingInfo.cpp b/lib/IR/PassTimingInfo.cpp
--- a/lib/IR/PassTimingInfo.cpp
+++ b/lib/IR/PassTimingInfo.cpp
@@ -249,19 +249,19 @@
   LLVM_DEBUG(dump());
 }
 
-void TimePassesHandler::registerCallbacks(PassInstrumentationCallbacks &PIC) {
+void TimePassesHandler::registerCallbacks(PassInstrumentationCallbacks &pic) {
   if (!Enabled)
     return;
 
-  PIC.registerBeforePassCallback(
+  pic.registerBeforePassCallback(
       [this](StringRef P, Any) { return this->runBeforePass(P); });
-  PIC.registerAfterPassCallback(
+  pic.registerAfterPassCallback(
       [this](StringRef P, Any) { this->runAfterPass(P); });
-  PIC.registerAfterPassInvalidatedCallback(
+  pic.registerAfterPassInvalidatedCallback(
       [this](StringRef P) { this->runAfterPass(P); });
-  PIC.registerBeforeAnalysisCallback(
+  pic.registerBeforeAnalysisCallback(
       [this](StringRef P, Any) { this->runBeforePass(P); });
-  PIC.registerAfterAnalysisCallback(
+  pic.registerAfterAnalysisCallback(
       [this](StringRef P, Any) { this->runAfterPass(P); });
 }
 
diff -git a/include/llvm/Passes/PassBuilder.h b/include/llvm/Passes/PassBuilder.h
--- a/include/llvm/Passes/PassBuilder.h
+++ bc/include/llvm/Passes/PassBuilder.h
@@ -111,7 +111,7 @@
   TargetMachine *TM;
   PipelineTuningOptions PTO;
   Optional<PGOOptions> PGOOpt;
-  PassInstrumentationCallbacks *PIC;
+  PassInstrumentationCallbacks *pic;
 
 public:
   /// A struct to capture parsed pass pipeline names.
@@ -228,8 +228,8 @@
   explicit PassBuilder(TargetMachine *TM = nullptr,
                        PipelineTuningOptions PTO = PipelineTuningOptions(),
                        Optional<PGOOptions> PGOOpt = None,
-                       PassInstrumentationCallbacks *PIC = nullptr)
-      : TM(TM), PTO(PTO), PGOOpt(PGOOpt), PIC(PIC) {}
+                       PassInstrumentationCallbacks *pic = nullptr)
+      : TM(TM), PTO(PTO), PGOOpt(PGOOpt), pic(pic) {}
 
   /// Cross register the analysis managers through their proxies.
   ///
diff --git a/include/llvm/Passes/StandardInstrumentations.h b/include/llvm/Passes/StandardInstrumentations.h
--- a/include/llvm/Passes/StandardInstrumentations.h
+++ b/include/llvm/Passes/StandardInstrumentations.h
@@ -35,7 +35,7 @@
   PrintIRInstrumentation() = default;
   ~PrintIRInstrumentation();
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
 private:
   bool printBeforePass(StringRef PassID, Any IR);
@@ -62,7 +62,7 @@
 public:
   StandardInstrumentations() = default;
 
-  void registerCallbacks(PassInstrumentationCallbacks &PIC);
+  void registerCallbacks(PassInstrumentationCallbacks &pic);
 
   TimePassesHandler &getTimePasses() { return TimePasses; }
 };
diff --git a/lib/Passes/PassRegistry.def b/lib/Passes/PassRegistry.def
--- a/lib/Passes/PassRegistry.def
+++ b/lib/Passes/PassRegistry.def
@@ -26,7 +26,7 @@
 MODULE_ANALYSIS("stack-safety", StackSafetyGlobalAnalysis())
 MODULE_ANALYSIS("targetlibinfo", TargetLibraryAnalysis())
 MODULE_ANALYSIS("verify", VerifierAnalysis())
-MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+MODULE_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 MODULE_ANALYSIS("asan-globals-md", ASanGlobalsMetadataAnalysis())
 
 #ifndef MODULE_ALIAS_ANALYSIS
@@ -96,7 +96,7 @@
 #endif
 CGSCC_ANALYSIS("no-op-cgscc", NoOpCGSCCAnalysis())
 CGSCC_ANALYSIS("fam-proxy", FunctionAnalysisManagerCGSCCProxy())
-CGSCC_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+CGSCC_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 #undef CGSCC_ANALYSIS
 
 #ifndef CGSCC_PASS
@@ -135,7 +135,7 @@
 FUNCTION_ANALYSIS("targetir",
                   TM ? TM->getTargetIRAnalysis() : TargetIRAnalysis())
 FUNCTION_ANALYSIS("verify", VerifierAnalysis())
-FUNCTION_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+FUNCTION_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 
 #ifndef FUNCTION_ALIAS_ANALYSIS
 #define FUNCTION_ALIAS_ANALYSIS(NAME, CREATE_PASS)                             \
@@ -278,7 +278,7 @@
 LOOP_ANALYSIS("no-op-loop", NoOpLoopAnalysis())
 LOOP_ANALYSIS("access-info", LoopAccessAnalysis())
 LOOP_ANALYSIS("ivusers", IVUsersAnalysis())
-LOOP_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(PIC))
+LOOP_ANALYSIS("pass-instrumentation", PassInstrumentationAnalysis(pic))
 #undef LOOP_ANALYSIS
 
 #ifndef LOOP_PASS
diff --git a/lib/Passes/StandardInstrumentations.cpp b/lib/Passes/StandardInstrumentations.cpp
--- a/lib/Passes/StandardInstrumentations.cpp
+++ b/lib/Passes/StandardInstrumentations.cpp
@@ -220,24 +220,24 @@
 }
 
 void PrintIRInstrumentation::registerCallbacks(
-    PassInstrumentationCallbacks &PIC) {
+    PassInstrumentationCallbacks &pic) {
   // BeforePass callback is not just for printing, it also saves a Module
   // for later use in AfterPassInvalidated.
   StoreModuleDesc = llvm::forcePrintModuleIR() && llvm::shouldPrintAfterPass();
   if (llvm::shouldPrintBeforePass() || StoreModuleDesc)
-    PIC.registerBeforePassCallback(
+    pic.registerBeforePassCallback(
         [this](StringRef P, Any IR) { return this->printBeforePass(P, IR); });
 
   if (llvm::shouldPrintAfterPass()) {
-    PIC.registerAfterPassCallback(
+    pic.registerAfterPassCallback(
         [this](StringRef P, Any IR) { this->printAfterPass(P, IR); });
-    PIC.registerAfterPassInvalidatedCallback(
+    pic.registerAfterPassInvalidatedCallback(
         [this](StringRef P) { this->printAfterPassInvalidated(P); });
   }
 }
 
 void StandardInstrumentations::registerCallbacks(
-    PassInstrumentationCallbacks &PIC) {
-  PrintIR.registerCallbacks(PIC);
-  TimePasses.registerCallbacks(PIC);
+    PassInstrumentationCallbacks &pic) {
+  PrintIR.registerCallbacks(pic);
+  TimePasses.registerCallbacks(pic);
 }
diff --git a/tools/opt/NewPMDriver.cpp b/tools/opt/NewPMDriver.cpp
--- a/tools/opt/NewPMDriver.cpp
+++ b/tools/opt/NewPMDriver.cpp
@@ -257,11 +257,11 @@
         P->CSAction = PGOOptions::CSIRUse;
       }
     }
-  PassInstrumentationCallbacks PIC;
+  PassInstrumentationCallbacks pic;
   StandardInstrumentations SI;
-  SI.registerCallbacks(PIC);
+  SI.registerCallbacks(pic);
 
-  PassBuilder PB(TM, PipelineTuningOptions(), P, &PIC);
+  PassBuilder PB(TM, PipelineTuningOptions(), P, &pic);
   registerEPCallbacks(PB, VerifyEachPass, DebugPM);
 
   // Load requested pass plugins and let them register pass builder callbacks
