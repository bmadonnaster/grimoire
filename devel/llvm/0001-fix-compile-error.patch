From ee4a6fe5c67503dbda7ae1afe7242ee495b2a3ec Mon Sep 17 00:00:00 2001
From: Florian Franzmann <siflfran@hawo.stw.uni-erlangen.de>
Date: Wed, 20 Dec 2017 23:46:41 +0100
Subject: [PATCH] fix compile error

---
 include/llvm/MC/MCObjectFileInfo.h | 2 +-
 lib/MC/MCObjectFileInfo.cpp        | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/llvm/MC/MCObjectFileInfo.h b/include/llvm/MC/MCObjectFileInfo.h
index 4d63444..a571f4a 100644
--- a/include/llvm/MC/MCObjectFileInfo.h
+++ b/include/llvm/MC/MCObjectFileInfo.h
@@ -198,7 +198,7 @@ protected:
   MCSection *SXDataSection;

 public:
-  void InitMCObjectFileInfo(const Triple &TT, bool PIC, MCContext &ctx,
+  void InitMCObjectFileInfo(const Triple &TT, bool pic, MCContext &ctx,
                             bool LargeCodeModel = false);

   bool getSupportsWeakOmittedEHFrame() const {
diff --git a/lib/MC/MCObjectFileInfo.cpp b/lib/MC/MCObjectFileInfo.cpp
index 21c5516..0388986 100644
--- a/lib/MC/MCObjectFileInfo.cpp
+++ b/lib/MC/MCObjectFileInfo.cpp
@@ -854,10 +854,10 @@ void MCObjectFileInfo::initWasmMCObjectF
   // TODO: Define more sections.
 }

-void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool PIC,
+void MCObjectFileInfo::InitMCObjectFileInfo(const Triple &TheTriple, bool pic,
                                             MCContext &ctx,
                                             bool LargeCodeModel) {
-  PositionIndependent = PIC;
+  PositionIndependent = pic;
   Ctx = &ctx;

   // Common.

From e3e9b1405dcff106ca6547bdd33c605dc4d8ecb8 Mon Sep 17 00:00:00 2001
From: Florian Franzmann <siflfran@hawo.stw.uni-erlangen.de>
Date: Thu, 21 Dec 2017 00:35:48 +0100
Subject: [PATCH] fix compile error

---
 lib/Transforms/Scalar/LICM.cpp         | 12 ++++++------
 lib/Transforms/Utils/PredicateInfo.cpp | 12 ++++++------
 tools/llvm-mc/llvm-mc.cpp              |  4 ++--
 3 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/lib/Transforms/Scalar/LICM.cpp b/lib/Transforms/Scalar/LICM.cpp
index 37b9c4b..19742d2 100644
--- a/lib/Transforms/Scalar/LICM.cpp
+++ b/lib/Transforms/Scalar/LICM.cpp
@@ -299,7 +299,7 @@ bool LoopInvariantCodeMotion::runOnLoop(
       for (BasicBlock *ExitBlock : ExitBlocks)
         InsertPts.push_back(&*ExitBlock->getFirstInsertionPt());

-      PredIteratorCache PIC;
+      PredIteratorCache pic;

       bool Promoted = false;

@@ -321,7 +321,7 @@ bool LoopInvariantCodeMotion::runOnLoop(
           PointerMustAliases.insert(ASI.getValue());

         Promoted |= promoteLoopAccessesToScalars(PointerMustAliases, ExitBlocks,
-                                                 InsertPts, PIC, LI, DT, TLI, L,
+                                                 InsertPts, pic, LI, DT, TLI, L,
                                                  CurAST, &SafetyInfo, ORE);
       }

@@ -1145,11 +1145,11 @@ public:
   LoopPromoter(Value *SP, ArrayRef<const Instruction *> Insts, SSAUpdater &S,
                const SmallSetVector<Value *, 8> &PMA,
                SmallVectorImpl<BasicBlock *> &LEB,
-               SmallVectorImpl<Instruction *> &LIP, PredIteratorCache &PIC,
+               SmallVectorImpl<Instruction *> &LIP, PredIteratorCache &pic,
                AliasSetTracker &ast, LoopInfo &li, DebugLoc dl, int alignment,
                bool UnorderedAtomic, const AAMDNodes &AATags)
       : LoadAndStorePromoter(Insts, S), SomePtr(SP), PointerMustAliases(PMA),
-        LoopExitBlocks(LEB), LoopInsertPts(LIP), PredCache(PIC), AST(ast),
+        LoopExitBlocks(LEB), LoopInsertPts(LIP), PredCache(pic), AST(ast),
         LI(li), DL(std::move(dl)), Alignment(alignment),
         UnorderedAtomic(UnorderedAtomic), AATags(AATags) {}

@@ -1224,7 +1224,7 @@ bool isKnownNonEscaping(Value *Object, c
 bool llvm::promoteLoopAccessesToScalars(
     const SmallSetVector<Value *, 8> &PointerMustAliases,
     SmallVectorImpl<BasicBlock *> &ExitBlocks,
-    SmallVectorImpl<Instruction *> &InsertPts, PredIteratorCache &PIC,
+    SmallVectorImpl<Instruction *> &InsertPts, PredIteratorCache &pic,
     LoopInfo *LI, DominatorTree *DT, const TargetLibraryInfo *TLI,
     Loop *CurLoop, AliasSetTracker *CurAST, LoopSafetyInfo *SafetyInfo,
     OptimizationRemarkEmitter *ORE) {
@@ -1446,7 +1446,7 @@ bool llvm::promoteLoopAccessesToScalars(
   SmallVector<PHINode *, 16> NewPHIs;
   SSAUpdater SSA(&NewPHIs);
   LoopPromoter Promoter(SomePtr, LoopUses, SSA, PointerMustAliases, ExitBlocks,
-                        InsertPts, PIC, *CurAST, *LI, DL, Alignment,
+                        InsertPts, pic, *CurAST, *LI, DL, Alignment,
                         SawUnorderedAtomic, AATags);

   // Set up the preheader to have a definition of the value.  It is the live-out
diff --git a/lib/Transforms/Utils/PredicateInfo.cpp b/lib/Transforms/Utils/PredicateInfo.cpp
index d4cdaed..5fcd5dd 100644
--- a/lib/Transforms/Utils/PredicateInfo.cpp
+++ b/lib/Transforms/Utils/PredicateInfo.cpp
@@ -508,10 +508,10 @@ Value *PredicateInfo::materializeStack(unsigned int &Counter,
       IRBuilder<> B(getBranchTerminator(ValInfo));
       Function *IF = Intrinsic::getDeclaration(
           F.getParent(), Intrinsic::ssa_copy, Op->getType());
-      CallInst *PIC =
+      CallInst *pic =
           B.CreateCall(IF, Op, Op->getName() + "." + Twine(Counter++));
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     } else {
       auto *PAssume = dyn_cast<PredicateAssume>(ValInfo);
       assert(PAssume &&
@@ -519,9 +519,9 @@ Value *PredicateInfo::materializeStack(unsigned int &Counter,
       IRBuilder<> B(PAssume->AssumeInst);
       Function *IF = Intrinsic::getDeclaration(
           F.getParent(), Intrinsic::ssa_copy, Op->getType());
-      CallInst *PIC = B.CreateCall(IF, Op);
-      PredicateMap.insert({PIC, ValInfo});
-      Result.Def = PIC;
+      CallInst *pic = B.CreateCall(IF, Op);
+      PredicateMap.insert({pic, ValInfo});
+      Result.Def = pic;
     }
   }
   return RenameStack.back().Def;
diff --git a/tools/llvm-mc/llvm-mc.cpp b/tools/llvm-mc/llvm-mc.cpp
index 8782588..c5900ce 100644
--- a/tools/llvm-mc/llvm-mc.cpp
+++ b/tools/llvm-mc/llvm-mc.cpp
@@ -128,7 +128,7 @@ MAttrs("mattr",
   cl::desc("Target specific attributes (-mattr=help for details)"),
   cl::value_desc("a1,+a2,-a3,..."));

-static cl::opt<bool> PIC("position-independent",
+static cl::opt<bool> pic("position-independent",
                          cl::desc("Position independent"), cl::init(false));

 static cl::opt<bool>
@@ -496,7 +496,7 @@ int main(int argc, char **argv) {
   // MCObjectFileInfo needs a MCContext reference in order to initialize itself.
   MCObjectFileInfo MOFI;
   MCContext Ctx(MAI.get(), MRI.get(), &MOFI, &SrcMgr);
-  MOFI.InitMCObjectFileInfo(TheTriple, PIC, Ctx, LargeCodeModel);
+  MOFI.InitMCObjectFileInfo(TheTriple, pic, Ctx, LargeCodeModel);

   if (SaveTempLabels)
     Ctx.setAllowTemporaryLabels(false);
