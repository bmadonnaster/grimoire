. "$GRIMOIRE"/FUNCTIONS &&
           SPELL=radare2
if [[ "$RADARE2_BRANCH" == "stable" ]]
then
         VERSION=4.2.1
          SOURCE="${SPELL}-${VERSION}.tar.xz"
   SOURCE_URL[0]="https://github.com/radare/radare2/archive/$VERSION.tar.gz"
     SOURCE_HASH=sha512:aed37f6ff7ae3a25e809e8fbab3ef1c370dba80b7b8ef440a025edfbda23314ce20990b3e89589fe6bee427b2beebabd67a9e1def603e53ca5078bf32bdc4e6c
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
else
         VERSION=$(get_scm_version)
   SOURCE_IGNORE=volatile
  FORCE_DOWNLOAD=on
          SOURCE="${SPELL}-git.tar.bz2"
   SOURCE_URL[0]="git://github.com/radare/$SPELL"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-git"
fi
        WEB_SITE="http://radare.org"
      LICENSE[0]=GPL
         ENTERED=20110506
           SHORT="open source reverse engineering framework"
cat << EOF
radare is a reverse engineering framework with tools to disassemble, debug,
analyze and manipulate binary files. The tools provided form a unix-like
toolchain.
    * Multi-architecture multi-platform
        - GNU/Linux, BSD, OSX, iPhoneOS, Windows and Solaris
        - x86{32,64}, arm, java, powerpc, mips
        - PE{32,64}, [fat]MACH0{32,64}, ELF{32,64}, CLASS
    * Highly scriptable
        - Batch mode and native plugins with full internal API access
        - Vala, Go, Python, ruby, perl, lua, Java, shellscript, ..
        - Scripting language based in mnemonic commands and macros
    * Hexadecimal editor
        - 64-bit offset support with virtual addressing and section maps
        - Assemble and disassemble from/to many architectures
        - Colorizes opcodes, bytes and debug register changes
        - Print data in various formats (int, float, disasm, timestamp, ..)
        - Search multiple patterns or keywords with binary mask support
        - Checksumming and data analysis of byte blocks
    * IO is wrapped
        - Support Files, disks, processes and streams
        - Virtual addressing with sections and multiple file mapping
        - Handles gdb:// and rap:// remote protocols
    * Debugger support
        - Software and hardware breakpoints
        - Tracing and logging facilities
    * Diffing between two functions or binaries
        - Graphviz friendly code analysis graphs
        - Colorize nodes and edges
    * Code analysis at opcode, basicblock, function levels
        - Embedded simple virtual machine to emulate code
        - Keep track of code and data references
        - Function calls and syscall decompilation
        - Function description, comments and library signatures
EOF
