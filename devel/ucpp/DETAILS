           SPELL=ucpp
         VERSION=1.3.2
          SOURCE="$SPELL-$VERSION.tar.bz2"
   SOURCE_URL[0]=https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/$SPELL/$SOURCE
     SOURCE_HASH=sha512:a8a22162c0e26bc8281928f921f4e531108ba02658fd9c7a1760ae2fe938c910215aa4db02e5c7f0c5ea1aa66d89157bc780f2f13c57fa603de6c2d0c48cfd32
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL"
        WEB_SITE="https://code.google.com/archive/p/ucpp/"
      LICENSE[0]="BSD-3-Clause"
         ENTERED=20211004
        KEYWORDS=""
           SHORT="embeddable, quick, light and fully compliant C99 preprocessor"
cat << EOF
A C preprocessor is a part of a C compiler responsible for macro replacement,
conditional compilation and inclusion of header files. It is often found as
a stand-alone program on Unix systems.

ucpp is such a preprocessor; it is designed to be quick and light, but anyway
fully compliant to the ISO standard 9899:1999, also known as C99. ucpp
can be compiled as a stand-alone program, or linked to some other code;
in the latter case, ucpp will output tokens, one at a time, on demand,
as an integrated lexer.

ucpp operates in two modes: -- lexer mode: ucpp is linked to some other
code and outputs a stream of tokens (each call to the lex() function will
yield one token) -- non-lexer mode: ucpp preprocesses text and outputs the
resulting text to a file descriptor; if linked to some other code, the cpp()
function must be called repeatedly, otherwise ucpp is a stand-alone binary.
EOF
