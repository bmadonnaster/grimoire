           SPELL=biolibc
         VERSION=0.2.3
          SOURCE="$SPELL-$VERSION.tar.gz"
   SOURCE_URL[0]=https://github.com/auerlab/$SPELL/archive/refs/tags/$VERSION.tar.gz
     SOURCE_HASH=sha512:53fa93189517d3632b5cacadeae1d61eef725b5381be15cadb4150e08dbd2bce9e5788cdc71f40bbd658b3c64ba7521436f7cad6676ce92dac735e769f92f24d
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        WEB_SITE="https://github.com/auerlab/biolibc"
      LICENSE[0]="BSD-2-Clause"
         ENTERED=20221023
        KEYWORDS=""
           SHORT="High-performance, memory-efficient bioinformatics library"
cat << EOF
Many bioinformatics pipelines are essentially made of mud and straw;
quick-and-dirty single-use scripts written in various interpreted languages,
with little or no meaningful error reporting or documentation, and generally
poor performance.

Biolibc is a collection of high-quality bricks that can be used to build
efficient, robust software applications to replace disposable scripts. Using
biolibc, you can easily develop permanent solutions that are easy to use and
install, with near-optimal performance, so that no one ever need reinvent
that particular wheel. Biolibc also facilitates development of more complex
applications by providing many commonly used building blocks, thus releasing
you from low-level coding.

For some examples, see biolibc-tools, vcf-split, ad2vcf, vcf2hap,
haploh-vcf-depths, peak-classifier, generand, ad-matrix, and fastq-trim.

In more technical terms, biolibc is a library of fast, memory-efficient C
functions for processing biological data. Like libc, it consists of numerous
disparate, general-purpose functions that can be used by a wide variety
of applications.

These include functions for reading and writing common file formats such
as BED, GFF, FASTA, FASTQ, SAM and VCF, string functions specific to
bioinformatics such as chromosome_name_cmp(), detecting feature overlaps, etc.

Biolibc, and the more generic libxtend, move your C coding to a higher
level by providing the most basic building blocks and additional software
layers commonly needed in bioinformatics programming. Using C and biolibc,
you can write simple, near-optimal C programs that may be orders of magnitude
faster than scripting languages such as Perl, Python, and R, while requiring
comparable coding effort. fastx-derep.c, a 1-page C program for dereplicating
FASTA/FASTQ files, offers a great example of how the right libraries eliminate
the need for low-level programming in C.
EOF
