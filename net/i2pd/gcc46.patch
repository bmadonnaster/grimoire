--- Makefile.linux.orig	2016-10-17 00:37:40.000000000 -0400
+++ Makefile.linux	2016-10-19 19:43:21.061181283 -0400
@@ -18,7 +18,7 @@
 else ifeq ($(shell expr match ${CXXVER} "4\.[7-9]"),3) # >= 4.7
 	NEEDED_CXXFLAGS += -std=c++11 -D_GLIBCXX_USE_NANOSLEEP=1
 else ifeq ($(shell expr match ${CXXVER} "4\.6"),3) # = 4.6
-	NEEDED_CXXFLAGS += -std=c++0x
+	NEEDED_CXXFLAGS += -std=c++0x -D_GLIBCXX_USE_NANOSLEEP=1
 else ifeq ($(shell expr match ${CXXVER} "[5-6]\.[0-9]"),3) # gcc >= 5.0
 	NEEDED_CXXFLAGS += -std=c++11
 else # not supported
--- Tunnel.cpp.orig	2016-10-17 00:37:40.000000000 -0400
+++ Tunnel.cpp	2016-10-19 19:56:06.096526898 -0400
@@ -406,7 +406,7 @@
 	
 	void Tunnels::AddTransitTunnel (std::shared_ptr<TransitTunnel> tunnel)
 	{
-		if (m_Tunnels.emplace (tunnel->GetTunnelID (), tunnel).second)
+		if (m_Tunnels.insert (make_pair(tunnel->GetTunnelID (), tunnel)).second)
 			m_TransitTunnels.push_back (tunnel);
 		else
 			LogPrint (eLogError, "Tunnel: tunnel with id ", tunnel->GetTunnelID (), " already exists");
@@ -808,7 +808,7 @@
 
 	void Tunnels::AddInboundTunnel (std::shared_ptr<InboundTunnel> newTunnel)
 	{
-		if (m_Tunnels.emplace (newTunnel->GetTunnelID (), newTunnel).second)
+		if (m_Tunnels.insert (make_pair(newTunnel->GetTunnelID (), newTunnel)).second)
 		{
 			m_InboundTunnels.push_back (newTunnel);
 			auto pool = newTunnel->GetTunnelPool ();
--- TunnelPool.h.orig
+++ TunnelPool.h
@@ -106,8 +106,8 @@ namespace tunnel
 			std::mutex m_CustomPeerSelectorMutex;
 			TunnelPeerSelector m_CustomPeerSelector;
 
-		uint64_t m_MinLatency=0; // if > 0 this tunnel pool will try building tunnels with minimum latency by ms
-		uint64_t m_MaxLatency=0; // if > 0 this tunnel pool will try building tunnels with maximum latency by ms
+		uint64_t m_MinLatency; // if > 0 this tunnel pool will try building tunnels with minimum latency by ms
+		uint64_t m_MaxLatency; // if > 0 this tunnel pool will try building tunnels with maximum latency by ms
 		
 		public:
 
--- TunnelPool.cpp.orig
+++ TunnelPool.cpp
@@ -14,6 +14,12 @@
 #include "Event.h"
 #endif
 
+template<typename T> struct decltype_t {
+	typedef T type;
+};
+
+#define DECLTYPE(expr) decltype_t<decltype(expr)>::type
+
 namespace i2p
 {
 namespace tunnel
@@ -22,7 +28,7 @@ namespace tunnel
 	TunnelPool::TunnelPool (int numInboundHops, int numOutboundHops, int numInboundTunnels, int numOutboundTunnels):
 		m_NumInboundHops (numInboundHops), m_NumOutboundHops (numOutboundHops),
 		m_NumInboundTunnels (numInboundTunnels), m_NumOutboundTunnels (numOutboundTunnels), m_IsActive (true),
-		m_CustomPeerSelector(nullptr)
+		m_CustomPeerSelector(nullptr), m_MinLatency(0), m_MaxLatency(0)
 	{
 	}
 
@@ -322,7 +328,7 @@ namespace tunnel
 		buf += 4;	
 		uint64_t timestamp = bufbe64toh (buf);
 
-		decltype(m_Tests)::mapped_type test;
+		DECLTYPE(m_Tests)::mapped_type test;
 		bool found = false;	
 		{
 			std::unique_lock<std::mutex> l(m_TestsMutex);
--- Event.h.orig	2017-02-16 13:28:19.692773653 -0500
+++ Event.h	2017-02-16 13:30:19.903805378 -0500
@@ -25,6 +25,7 @@
 		class EventCore
 		{
 		public:
+			EventCore(): m_listener(nullptr) {}
 			void QueueEvent(const EventType & ev);
       void CollectEvent(const std::string & type, const std::string & ident, uint64_t val);
 			void SetListener(EventListener * l);
@@ -39,7 +40,7 @@
         uint64_t Val;
       };
       std::map<std::string, CollectedEvent> m_collected;
-			EventListener * m_listener = nullptr;
+			EventListener * m_listener;
 		};
 #ifdef WITH_EVENTS		
 		extern EventCore core;
 		extern EventCore core;
--- Log.cpp.orig
+++ Log.cpp
@@ -30,11 +30,11 @@
 	static const char *LogMsgColors[] = { "", "", "", "", "" };
 #else /* UNIX */
 	static const char *LogMsgColors[] = {
-		[eLogError]     = "\033[1;31m", /* red */
-		[eLogWarning]   = "\033[1;33m", /* yellow */
-		[eLogInfo]      = "\033[1;36m", /* cyan */
-		[eLogDebug]     = "\033[1;34m", /* blue */
-		[eNumLogLevels] = "\033[0m",    /* reset */
+		"\033[1;31m", /* red */
+		"\033[1;33m", /* yellow */
+		"\033[1;36m", /* cyan */
+		"\033[1;34m", /* blue */
+		"\033[0m",    /* reset */
 	};
 #endif
 
