--- Makefile.linux.orig	2017-08-17 15:44:59.293424249 -0400
+++ Makefile.linux	2017-08-17 15:46:10.575386368 -0400
@@ -18,7 +18,7 @@
 else ifeq ($(shell expr match ${CXXVER} "4\.[7-9]"),3) # >= 4.7
 	NEEDED_CXXFLAGS += -std=c++11 -D_GLIBCXX_USE_NANOSLEEP=1
 else ifeq ($(shell expr match ${CXXVER} "4\.6"),3) # = 4.6
-	NEEDED_CXXFLAGS += -std=c++0x
+	NEEDED_CXXFLAGS += -std=c++0x -D_GLIBCXX_USE_NANOSLEEP=1
 else ifeq ($(shell expr match ${CXXVER} "[5-7]\.[0-9]"),3) # gcc >= 5.0
 	NEEDED_CXXFLAGS += -std=c++11
 else # not supported
--- libi2pd/Tunnel.cpp.orig	2016-10-17 00:37:40.000000000 -0400
+++ libi2pd/Tunnel.cpp	2016-10-19 19:56:06.096526898 -0400
@@ -406,7 +406,7 @@
 	
 	void Tunnels::AddTransitTunnel (std::shared_ptr<TransitTunnel> tunnel)
 	{
-		if (m_Tunnels.emplace (tunnel->GetTunnelID (), tunnel).second)
+		if (m_Tunnels.insert (make_pair(tunnel->GetTunnelID (), tunnel)).second)
 			m_TransitTunnels.push_back (tunnel);
 		else
 			LogPrint (eLogError, "Tunnel: tunnel with id ", tunnel->GetTunnelID (), " already exists");
@@ -808,7 +808,7 @@
 
 	void Tunnels::AddInboundTunnel (std::shared_ptr<InboundTunnel> newTunnel)
 	{
-		if (m_Tunnels.emplace (newTunnel->GetTunnelID (), newTunnel).second)
+		if (m_Tunnels.insert (make_pair(newTunnel->GetTunnelID (), newTunnel)).second)
 		{
 			m_InboundTunnels.push_back (newTunnel);
 			auto pool = newTunnel->GetTunnelPool ();
--- libi2pd/TunnelPool.h.orig
+++ libi2pd/TunnelPool.h
@@ -123,8 +123,8 @@
 			std::mutex m_CustomPeerSelectorMutex;
 			ITunnelPeerSelector * m_CustomPeerSelector;
 
-		uint64_t m_MinLatency=0; // if > 0 this tunnel pool will try building tunnels with minimum latency by ms
-		uint64_t m_MaxLatency=0; // if > 0 this tunnel pool will try building tunnels with maximum latency by ms
+		uint64_t m_MinLatency; // if > 0 this tunnel pool will try building tunnels with minimum latency by ms
+		uint64_t m_MaxLatency; // if > 0 this tunnel pool will try building tunnels with maximum latency by ms
 
 		public:
 
--- libi2pd/TunnelPool.cpp.orig
+++ libi2pd/TunnelPool.cpp
@@ -14,6 +14,12 @@
 #include "Event.h"
 #endif
 
+template<typename T> struct decltype_t {
+	typedef T type;
+};
+
+#define DECLTYPE(expr) decltype_t<decltype(expr)>::type
+
 namespace i2p
 {
 namespace tunnel
@@ -22,7 +28,7 @@
 	TunnelPool::TunnelPool (int numInboundHops, int numOutboundHops, int numInboundTunnels, int numOutboundTunnels):
 		m_NumInboundHops (numInboundHops), m_NumOutboundHops (numOutboundHops),
 		m_NumInboundTunnels (numInboundTunnels), m_NumOutboundTunnels (numOutboundTunnels), m_IsActive (true),
-		m_CustomPeerSelector(nullptr)
+		m_CustomPeerSelector(nullptr), m_MinLatency(0), m_MaxLatency(0)
 	{
 	}
 
@@ -326,7 +332,7 @@
 		buf += 4;
 		uint64_t timestamp = bufbe64toh (buf);
 
-		decltype(m_Tests)::mapped_type test;
+		DECLTYPE(m_Tests)::mapped_type test;
 		bool found = false;
 		{
 			std::unique_lock<std::mutex> l(m_TestsMutex);
--- libi2pd/Event.h.orig	2017-02-16 13:28:19.692773653 -0500
+++ libi2pd/Event.h	2017-02-16 13:30:19.903805378 -0500
@@ -25,6 +25,7 @@
 		class EventCore
 		{
 		public:
+			EventCore(): m_listener(nullptr) {}
 			void QueueEvent(const EventType & ev);
       void CollectEvent(const std::string & type, const std::string & ident, uint64_t val);
 			void SetListener(EventListener * l);
@@ -39,7 +40,7 @@
         uint64_t Val;
       };
       std::map<std::string, CollectedEvent> m_collected;
-			EventListener * m_listener = nullptr;
+			EventListener * m_listener;
 		};
 #ifdef WITH_EVENTS		
 		extern EventCore core;
 		extern EventCore core;
--- libi2pd/Log.cpp.orig
+++ libi2pd/Log.cpp
@@ -31,12 +31,12 @@
 	static const char *LogMsgColors[] = { "", "", "", "", "", "" };
 #else /* UNIX */
 	static const char *LogMsgColors[] = {
-		[eLogNone]      = "\033[0m",    /* reset */
-		[eLogError]     = "\033[1;31m", /* red */
-		[eLogWarning]   = "\033[1;33m", /* yellow */
-		[eLogInfo]      = "\033[1;36m", /* cyan */
-		[eLogDebug]     = "\033[1;34m", /* blue */
-		[eNumLogLevels] = "\033[0m",    /* reset */
+		"\033[0m",    /* reset */
+		"\033[1;31m", /* red */
+		"\033[1;33m", /* yellow */
+		"\033[1;36m", /* cyan */
+		"\033[1;34m", /* blue */
+		"\033[0m",    /* reset */
 	};
 #endif
 
--- libi2pd_client/HTTPProxy.h.orig	2017-12-04 13:40:32.000000000 -0500
+++ libi2pd_client/HTTPProxy.h	2017-12-07 13:14:26.956591634 -0500
@@ -7,8 +7,6 @@
 	{
 		public:
 			HTTPProxy(const std::string& name, const std::string& address, int port, const std::string & outproxy, std::shared_ptr<i2p::client::ClientDestination> localDestination);
-			HTTPProxy(const std::string& name, const std::string& address, int port, std::shared_ptr<i2p::client::ClientDestination> localDestination = nullptr) :
-				HTTPProxy(name, address, port, "", localDestination) {} ;
 			~HTTPProxy() {};
 
 			std::string GetOutproxyURL() const { return m_OutproxyUrl; }
--- libi2pd/Ed25519.h.orig	2018-06-26 10:46:01.000000000 -0700
+++ libi2pd/Ed25519.h	2018-06-27 16:24:25.365149870 -0700
@@ -10,14 +10,14 @@
 {
 	struct EDDSAPoint
 	{
-		BIGNUM * x {nullptr};
-		BIGNUM * y {nullptr};
-		BIGNUM * z {nullptr};
-		BIGNUM * t {nullptr}; // projective coordinates
+		BIGNUM * x;
+		BIGNUM * y;
+		BIGNUM * z;
+		BIGNUM * t; // projective coordinates
 
-		EDDSAPoint () {}
-		EDDSAPoint (const EDDSAPoint& other)   { *this = other; }
-		EDDSAPoint (EDDSAPoint&& other)        { *this = std::move (other); }
+		EDDSAPoint (): x(nullptr), y(nullptr), z(nullptr), t(nullptr) {}
+		EDDSAPoint (const EDDSAPoint& other): x(nullptr), y(nullptr), z(nullptr), t(nullptr) { *this = other; }
+		EDDSAPoint (EDDSAPoint&& other): x(nullptr), y(nullptr), z(nullptr), t(nullptr)      { *this = std::move (other); }
 		EDDSAPoint (BIGNUM * x1, BIGNUM * y1, BIGNUM * z1 = nullptr, BIGNUM * t1 = nullptr)
 			: x(x1)
 			, y(y1)
--- libi2pd/NTCPSession.cpp.orig	2018-06-26 10:46:01.000000000 -0700
+++ libi2pd/NTCPSession.cpp	2018-07-23 21:11:18.917335635 -0700
@@ -183,7 +183,7 @@
 				}
 			}
 			// TODO: check for number of pending keys
-			auto work = new NTCPWork{shared_from_this()};
+			auto work = new NTCPWork({{shared_from_this()}});
 			m_Server.Work(work->session, [work, this]() -> std::function<void(void)> {
 					if (!work->session->m_DHKeysPair)
 						work->session->m_DHKeysPair = transports.GetNextDHKeysPair ();
@@ -249,7 +249,7 @@
 		}
 		else
 		{
-			auto work = new NTCPWork{shared_from_this()};
+			auto work = new NTCPWork({{shared_from_this()}});
 			m_Server.Work(work->session, [work, this]() -> std::function<void(void)> {
 				work->session->CreateAESKey (work->session->m_Establisher->phase2.pubKey);
 				return std::bind(&NTCPSession::HandlePhase2, work->session, work);
--- libi2pd_client/I2PService.h.orig	2018-06-26 10:46:01.000000000 -0700
+++ libi2pd_client/I2PService.h	2018-07-23 21:14:32.314300936 -0700
@@ -70,7 +70,7 @@
             bool m_ReadyTimerTriggered;
 			uint32_t m_ConnectTimeout;
 
-            const size_t NEVER_TIMES_OUT = 0;
+            const size_t NEVER_TIMES_OUT;
       
 		public:
 			bool isUpdated; // transient, used during reload only
--- libi2pd_client/I2PService.cpp.orig	2018-06-26 10:46:01.000000000 -0700
+++ libi2pd_client/I2PService.cpp	2018-07-23 21:15:59.847520946 -0700
@@ -16,7 +16,8 @@
 			m_ReadyTimer(m_LocalDestination->GetService()),
 			m_ReadyTimerTriggered(false),
 			m_ConnectTimeout(0),
-			isUpdated (true)
+			isUpdated (true),
+			NEVER_TIMES_OUT(0)
 	{
 		m_LocalDestination->Acquire ();
 	}
@@ -26,7 +26,8 @@
 		m_LocalDestination (i2p::client::context.CreateNewLocalDestination (false, kt)),
 		m_ReadyTimer(m_LocalDestination->GetService()),
 		m_ConnectTimeout(0),
-		isUpdated (true)
+		isUpdated (true),
+		NEVER_TIMES_OUT(0)
 	{
 		m_LocalDestination->Acquire ();
 	}
