           SPELL=haskell-mtl-compat
         VERSION=0.2.1.3
          SOURCE="mtl-compat-${VERSION}.tar.gz"
   SOURCE_URL[0]=https://hackage.haskell.org/package/mtl-compat-${VERSION}/${SOURCE}
     SOURCE_HASH=sha512:c9afa97eb5dc1bddcbf0e088352141d56b603562f80fcbde6811610a4e71e1496dd5f07e4338644930bf06b403bc08d35799f7063ae845ecdb71e619b2342a18
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/mtl-compat-${VERSION}"
        WEB_SITE="https://github.com/haskell-compat/mtl-compat"
      LICENSE[0]=BSD
         ENTERED=20181103
           SHORT="this package backports the Control.Monad.Except module from mtl"
cat << EOF
This package backports the Control.Monad.Except module from mtl (if using
mtl-2.2.0.1 or earlier), which reexports the ExceptT monad transformer and
the MonadError class.

This package should only be used if there is a need to use the
Control.Monad.Except module specifically. If you just want the mtl class
instances for ExceptT, use transformers-compat instead, since mtl-compat
does nothing but reexport the instances from that package.

Note that unlike how mtl-2.2 or later works, the Control.Monad.Except module
defined in this package exports all of ExceptT's monad class instances.
Therefore, you may have to declare import Control.Monad.Except () at the
top of your file to get all of the ExceptT instances in scope.
EOF
