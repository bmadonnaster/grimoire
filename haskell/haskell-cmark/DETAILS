           SPELL=haskell-cmark
         VERSION=0.5.6
          SOURCE="cmark-$VERSION.tar.gz"
   SOURCE_URL[0]=http://hackage.haskell.org/package/cmark-$VERSION/$SOURCE
     SOURCE_HASH=sha512:ba9ae5268c1d55123754e7b0c5f73c5134fa1d57a7a624e865c5c9690f073d9db9e6f1b7bc5fea86305d3a72a7af371a22f12fcce4ccbe9fd2942ba1d3677835
SOURCE_DIRECTORY="$BUILD_DIRECTORY/cmark-$VERSION"
        WEB_SITE="https://github.com/jgm/commonmark-hs"
      LICENSE[0]="BSD3"
         ENTERED=20150626
        KEYWORDS=""
           SHORT="libcmark bindings for Haskell"
cat << EOF
This package provides Haskell bindings for libcmark, the reference parser for
CommonMark, a fully specified variant of Markdown. It includes sources for
libcmark (0.20.0) and does not require prior installation of the C library.

cmark provides the following advantages over existing Markdown libraries for
Haskell:

- Speed: Conversion speed is on par with the sundown library. We were unable to
  measure precisely against sundown, which raised a malloc error when compiled
  into our benchmark suite. Relative to other implementations: cmark was 82
  times faster than cheapskate, 59 times faster than markdown, 105 times faster
  than pandoc, and 2.8 times faster than discount.

- Memory footprint: Memory footprint is on par with sundown.  On one sample, the
  library uses a fourth the memory that markdown uses, and less than a tenth the
  memory that pandoc uses.

- Robustness: cmark can handle whatever is thrown at it, without the exponential
  blowups in parsing time one can sometimes get with other libraries.

- Accuracy: cmark passes the CommonMark spec's suite of over 500 conformance
  tests.

- Standardization: Since there is a spec and a comprehensive suite of tests, we
  can have a high degree of confidence that any two CommonMark implementations
  will behave the same. Thus, for example, one could use this library for
  server-side rendering and commonmark.js for client-side previewing.

- Ease of installation: cmark is portable and has minimal dependencies.

cmark does not provide Haskell versions of the whole libcmark API, which is
built around mutable cmark_node objects. Instead, it provides functions for
converting CommonMark to HTML (and other formats), and a function for
converting CommonMark to a Node tree that can be processed further using
Haskell.

A note on security: This library does not attempt to sanitize HTML output. We
recommend using xss-sanitize to filter the output.

A note on stability: There is a good chance the API will change significantly
after this early release.
EOF
