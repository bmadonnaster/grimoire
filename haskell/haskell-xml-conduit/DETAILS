           SPELL=haskell-xml-conduit
         VERSION=1.7.1.2
          SOURCE="xml-conduit-${VERSION}.tar.gz"
   SOURCE_URL[0]=https://hackage.haskell.org/package/xml-conduit-${VERSION}/${SOURCE}
     SOURCE_HASH=sha512:da9d8af3f3f8cc0a88557d42edce1aa5cf965d3a87a1dcf8db3fc2dd8bee8ccdf574f9a7b091b94f6831f824b56e2598c5a0ba94d0d16edff47f2d7e9217448c
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/xml-conduit-${VERSION}"
        WEB_SITE="http://github.com/snoyberg/xml"
      LICENSE[0]=MIT
         ENTERED=20150802
           SHORT="Pure-Haskell utilities for dealing with XML with the conduit package"
cat << EOF
This package provides parsing and rendering functions for XML. It is based
on the datatypes found in the xml-types package. This package is broken up
into the following modules:

 * Text.XML: DOM-based parsing and rendering. This is the most commonly used
   module.
 * Text.XML.Cursor: A wrapper around Text.XML which allows bidirectional
   traversing of the DOM, similar to XPath. (Note: Text.XML.Cursor.Generic
   is the same concept, but will work with any node representation.)
 * Text.XML.Unresolved: A slight modification to Text.XML which does not
   require all entities to be resolved at parsing. The datatypes are slightly
   more complicated here, and therefore this module is only recommended when
   you need to deal directly with raw entities.
 * Text.XML.Stream.Parse: Streaming parser, including some streaming parser
 combinators.  * Text.XML.Stream.Render: Streaming renderer.
EOF
