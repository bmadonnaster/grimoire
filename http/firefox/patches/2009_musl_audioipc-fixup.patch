# HG changeset patch
# Parent  e44961cd1e80024c729afde2019f75917d7522f4
Stop storing sched_param in RtPriorityThreadInfo on Linux

It wasn't really being used anyways, since we alwayrs restore priority
to `SCHED_OTHER`, that expects the only common field of `sched_param` to
be zero, because `SCHED_OTHER` does not support a priority.

diff --git a/third_party/rust/audio_thread_priority/.cargo-checksum.json b/third_party/rust/audio_thread_priority/.cargo-checksum.json
--- a/third_party/rust/audio_thread_priority/.cargo-checksum.json
+++ b/third_party/rust/audio_thread_priority/.cargo-checksum.json
@@ -1,1 +1,1 @@
-{"files":{"Cargo.toml":"363ab43ea4980149350eb3a4da691a93f0b7c61a5d3b4ce8b59f73cde5866a92","Makefile":"0f9a771cfb30c7c4b9961d82fdca4e9e229a955bb2e636474a4101389e18e938","README.md":"bcfa4948edf52fdacd485200a0c1c886a92232cc1931eeb4e1044050f46ec253","atp_test.cpp":"8075a040941a65fb9e3f7cbf0535853ca6661c3ac442ec35569b42b24bbec797","audio_thread_priority.h":"f0ecaf1b674f794cde0dc834028e074d4e4675d22ae96acf08b2ae1dceb3474e","generate_osx_bindings.sh":"06e4e03450f788ced18d31fff5660919e6f6ec1119ddace363ffeb82f0518a71","src/lib.rs":"516388cf4ccf55f23a6ccb248f56ab525b759a24819e67605cd12f640517ddd3","src/mach_sys.rs":"352560fcb9b41d877cff92e5b3b04d6dc68b1f30508ce4b9aed78940120a883e","src/rt_linux.rs":"b4db36baa754ab166b40f3801acc4f2046d226a2645f0e136dbbfa1bc771344e","src/rt_mach.rs":"5fce324b9a64305ff221fdd185eaa4b1c7386b6e61edc32cf63e424f9f3d90ef","src/rt_win.rs":"f8f5b7af21cadd686cf7d8099d1972d3265c3889574020bd4ea088b832fbfa51"},"package":"197b2d259505d11c92d266e1784f01cc935eb764d2f54e16aedf4e5085197871"}
\ No newline at end of file
+{"files":{"Cargo.toml":"363ab43ea4980149350eb3a4da691a93f0b7c61a5d3b4ce8b59f73cde5866a92","Makefile":"0f9a771cfb30c7c4b9961d82fdca4e9e229a955bb2e636474a4101389e18e938","README.md":"bcfa4948edf52fdacd485200a0c1c886a92232cc1931eeb4e1044050f46ec253","atp_test.cpp":"8075a040941a65fb9e3f7cbf0535853ca6661c3ac442ec35569b42b24bbec797","audio_thread_priority.h":"f0ecaf1b674f794cde0dc834028e074d4e4675d22ae96acf08b2ae1dceb3474e","generate_osx_bindings.sh":"06e4e03450f788ced18d31fff5660919e6f6ec1119ddace363ffeb82f0518a71","src/lib.rs":"516388cf4ccf55f23a6ccb248f56ab525b759a24819e67605cd12f640517ddd3","src/mach_sys.rs":"352560fcb9b41d877cff92e5b3b04d6dc68b1f30508ce4b9aed78940120a883e","src/rt_linux.rs":"61df532b5cf78d3300e1284c735985e48da32582541973d8ec11a1fb83d3d597","src/rt_mach.rs":"5fce324b9a64305ff221fdd185eaa4b1c7386b6e61edc32cf63e424f9f3d90ef","src/rt_win.rs":"f8f5b7af21cadd686cf7d8099d1972d3265c3889574020bd4ea088b832fbfa51"},"package":"197b2d259505d11c92d266e1784f01cc935eb764d2f54e16aedf4e5085197871"}
diff --git a/third_party/rust/audio_thread_priority/src/rt_linux.rs b/third_party/rust/audio_thread_priority/src/rt_linux.rs
--- a/third_party/rust/audio_thread_priority/src/rt_linux.rs
+++ b/third_party/rust/audio_thread_priority/src/rt_linux.rs
@@ -26,19 +26,17 @@ pub struct RtPriorityThreadInfoInternal 
     pid: libc::pid_t,
     /// System-wise thread id, use to promote the thread via dbus.
     thread_id: kernel_pid_t,
     /// Process-local thread id, used to restore scheduler characteristics. This information is not
     /// useful in another process, but is useful tied to the `thread_id`, when back into the first
     /// process.
     pthread_id: libc::pthread_t,
     /// ...
-    policy: libc::c_int,
-    /// ...
-    param: libc::sched_param,
+    policy: libc::c_int
 }
 
 impl RtPriorityThreadInfoInternal {
     /// Serialize a RtPriorityThreadInfoInternal to a byte buffer.
     pub fn serialize(&self) -> [u8; std::mem::size_of::<Self>()] {
         unsafe { std::mem::transmute::<Self, [u8; std::mem::size_of::<Self>()]>(*self) }
     }
     /// Get an RtPriorityThreadInfoInternal from a byte buffer.
@@ -136,19 +134,21 @@ pub fn promote_current_thread_to_real_ti
     let thread_info = get_current_thread_info_internal()?;
     promote_thread_to_real_time_internal(thread_info, audio_buffer_frames, audio_samplerate_hz)
 }
 
 pub fn demote_current_thread_from_real_time_internal(rt_priority_handle: RtPriorityHandleInternal)
                                             -> Result<(), ()> {
     assert!(unsafe { libc::pthread_self() } == rt_priority_handle.thread_info.pthread_id);
 
+    let param = unsafe { std::mem::zeroed::<libc::sched_param>() };
+
     if unsafe { libc::pthread_setschedparam(rt_priority_handle.thread_info.pthread_id,
                                             rt_priority_handle.thread_info.policy,
-                                            &rt_priority_handle.thread_info.param) } < 0 {
+                                            &param) } < 0 {
         error!("could not demote thread {}", OSError::last_os_error().raw_os_error().unwrap());
         return Err(());
     }
     return Ok(());
 }
 
 /// This can be called by sandboxed code, it only restores priority to what they were.
 pub fn demote_thread_from_real_time_internal(thread_info: RtPriorityThreadInfoInternal)
@@ -182,18 +182,17 @@ pub fn get_current_thread_info_internal(
     }
 
     let pid = unsafe { libc::getpid() };
 
     Ok(RtPriorityThreadInfoInternal {
         pid,
         thread_id,
         pthread_id,
-        policy,
-        param
+        policy
     })
 }
 
 /// This set the RLIMIT_RTTIME resource to something other than "unlimited". It's necessary for the
 /// rtkit request to succeed, and needs to hapen in the child. We can't get the real limit here,
 /// because we don't have access to DBUS, so it is hardcoded to 200ms, which is the default in the
 /// rtkit package.
 pub fn set_real_time_hard_limit_internal(audio_buffer_frames: u32,
