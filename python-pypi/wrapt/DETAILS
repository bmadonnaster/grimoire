           SPELL=wrapt
         VERSION=1.13.1
          SOURCE="$SPELL-$VERSION.tar.gz"
   SOURCE_URL[0]=https://pypi.python.org/packages/source/w/$SPELL/$SOURCE
     SOURCE_HASH=sha512:1789280dcf9a717393493a17bd05dbd3bd4701f0a313c57fecaa8455b4b396f2ad469dcd333c24a040fb6fb470fd22ad5f6240d71d9bc2e8de793c4bd89068ad
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        WEB_SITE="https://github.com/GrahamDumpleton/wrapt"
      LICENSE[0]="BSD-2"
         ENTERED=20170825
        KEYWORDS=""
           SHORT="Module for decorators, wrappers and monkey patching"
cat << EOF
The aim of the wrapt module is to provide a transparent object proxy for
Python, which can be used as the basis for the construction of function
wrappers and decorator functions.

The wrapt module focuses very much on correctness. It therefore goes
way beyond existing mechanisms such as functools.wraps() to ensure that
decorators preserve introspectability, signatures, type checking abilities
etc. The decorators that can be constructed using this module will work in
far more scenarios than typical decorators and provide more predictable and
consistent behaviour.

To ensure that the overhead is as minimal as possible, a C extension module
is used for performance critical components. An automatic fallback to a pure
Python implementation is also provided where a target system does not have
a compiler to allow the C extension to be compiled.
EOF
