           SPELL=greenlet
         VERSION=1.1.2
              VX=0c/10/754e21b5bea89d0e73f99d60c83754df7cc64db74f47d98ab187669ce341
          SOURCE=$SPELL-$VERSION.tar.gz
   SOURCE_URL[0]="https://files.pythonhosted.org/packages/${VX}/${SOURCE}"
     SOURCE_HASH=sha512:e7bcc1bfffc80fcaee735ee69f6f53e8f68bd4d3ab8ad6ed813684ffad72340a347e4810f18cc32d9c3948b5c995aefc3a53ce4ae60324093dae12042d33183b
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        DOC_DIRS=""
      LICENSE[0]=MIT
        WEB_SITE=https://github.com/python-greenlet/greenlet
         ENTERED=20140520
           SHORT="lightweight in-process concurrent programming"
cat << EOF
The greenlet package is a spin-off of Stackless, a version of CPython that
supports micro-threads called "tasklets". Tasklets run pseudo-concurrently
(typically in a single or a few OS-level threads) and are synchronized with data
exchanges on "channels".

A "greenlet", on the other hand, is a still more primitive notion of
micro-thread with no implicit scheduling; coroutines, in other words. This is
useful when you want to control exactly when your code runs. You can build
custom scheduled micro-threads on top of greenlet; however, it seems that
greenlets are useful on their own as a way to make advanced control
flow structures. For example, we can recreate generators; the difference with
Python's own generators is that our generators can call nested functions and the
nested functions can yield values too. Additionally, you don't need a "yield"
keyword.

Greenlets are provided as a C extension module for the regular unmodified
interpreter.

Greenlets are lightweight coroutines for in-process concurrent programming.
EOF
