           SPELL=docxtpl
         VERSION=0.3.9
          SOURCE="$SPELL-$VERSION.tar.gz"
              VX=4d/7a/b41ea2428c3ef8b7bfef437369994f505c82715dfaedb94b34c9e6fc4e66
   SOURCE_URL[0]=https://pypi.python.org/packages/$VX/$SOURCE
     SOURCE_HASH=sha512:ac17b7ad5b97c210c4ba67948b771e399dcbb9b1fafcc979cac75662359fe7962d99320598f44da4c87c183062cb0f1f166b4df61bcf0e2f7282be59f765958a
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        WEB_SITE="https://github.com/elapouya/python-docx-template"
      LICENSE[0]="LGPL"
         ENTERED=20170828
        KEYWORDS=""
           SHORT="Python docx template engine"
cat << EOF
Use a docx as a jinja2 template.

This package uses 2 major packages:
* python-docx for reading, writing and creating sub documents
* jinja2 for managing tags inserted into the template docx

python-docx-template has been created because python-docx is powerful for
creating documents but not for modifying them.

The idea is to begin to create an exemple of the document you want to generate
with microsoft word, it can be as complex as you want: pictures, index tables,
footer, header, variables, anything you can do with word. Then, as you are
still editing the document with microsoft word, you insert jinja2-like tags
directly in the document. You save the document as a .docx file (xml format):
it will be your .docx template file.

Now you can use python-docx-template to generate as many word documents you
want from this .docx template and context variables you will associate.
EOF
