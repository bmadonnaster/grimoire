           SPELL=pyotp
         VERSION=2.2.7
          SOURCE="${SPELL}-${VERSION}.tar.gz"
   SOURCE_URL[0]=https://pypi.org/packages/source/p/${SPELL}/${SOURCE}
     SOURCE_HASH=sha512:d8fe8a737c75b1731042ffc7213eb20851fd31ee3583511a8db6c2adb171c63d6f2620d50921997836cbf34c37829d4f0bd44d8955ee66a1bec7e94e2368e19d
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
        WEB_SITE=https://pyotp.readthedocs.io/
      LICENSE[0]=BSD
         ENTERED=20170727
        KEYWORDS="otp totp hotp auth"
           SHORT="Python One-Time Password library"
cat << EOF
PyOTP is a Python library for generating and verifying one-time passwords.

It can be used to implement two-factor (2FA) or multi-factor (MFA)
authentication methods in web applications and in other systems that require
users to log in.

Open MFA standards are defined in RFC 4226 (HOTP: An HMAC-Based One-Time
Password Algorithm) and in RFC 6238 (TOTP: Time-Based One-Time Password
Algorithm). PyOTP implements server-side support for both of these standards.
Client-side support can be enabled by sending authentication codes to users over
SMS or email (HOTP) or, for TOTP, by instructing users to use Google
Authenticator, Authy, or another compatible app. Users can set up auth tokens in
their apps easily by using their phone camera to scan otpauth:// QR codes
provided by PyOTP.

We recommend that implementers read the OWASP Authentication Cheat Sheet and
NIST SP 800-63-3: Digital Authentication Guideline for a high level overview of
authentication best practices.
EOF
