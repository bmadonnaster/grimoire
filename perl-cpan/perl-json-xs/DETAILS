           SPELL=perl-json-xs
         VERSION=3.04
          SOURCE="JSON-XS-$VERSION.tar.gz"
   SOURCE_URL[0]=$PERL_CPAN_URL/authors/id/M/ML/MLEHMANN/$SOURCE
     SOURCE_HASH=sha512:69c2e199385b5b5e331d905b64805304de80e1a3b393acaf7dce21c45254b1f23f1a83b246dcd3a80c2cfdadaf8ce3634ee587c469629cb69106f0c2239c73db
SOURCE_DIRECTORY="$BUILD_DIRECTORY/JSON-XS-$VERSION"
        WEB_SITE="http://search.cpan.org/~/JSON-XS/"
      LICENSE[0]="ART"
         ENTERED=20180104
        KEYWORDS=""
           SHORT="JSON::XS - JSON serialising/deserialising, done correctly and fast"
cat << EOF
This module converts Perl data structures to JSON and vice versa. Its primary
goal is to be correct and its secondary goal is to be fast. To reach the
latter goal it was written in C.

Beginning with version 2.0 of the JSON module, when both JSON and JSON::XS
are installed, then JSON will fall back on JSON::XS (this can be overridden)
with no overhead due to emulation (by inheriting constructor and methods). If
JSON::XS is not available, it will fall back to the compatible JSON::PP
module as backend, so using JSON instead of JSON::XS gives you a portable
JSON API that can be fast when you need it and doesn't require a C compiler
when that is a problem.

As this is the n-th-something JSON module on CPAN, what was the reason to
write yet another JSON module? While it seems there are many JSON modules,
none of them correctly handle all corner cases, and in most cases their
maintainers are unresponsive, gone missing, or not listening to bug reports
for other reasons.
EOF
