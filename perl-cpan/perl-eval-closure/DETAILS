           SPELL=perl-eval-closure
         VERSION=0.14
          SOURCE="Eval-Closure-$VERSION.tar.gz"
   SOURCE_URL[0]=$PERL_CPAN_URL/authors/id/D/DO/DOY/$SOURCE
     SOURCE_HASH=sha512:fc55206bd39c4cb39360d06b6f39a65743f34b5e59d1a1ce99bf5831b9d88a03fb6dadf32fa9f0868e140fce719d53a7b13027f397cdd7f6ca05cc81277bdc08
SOURCE_DIRECTORY="$BUILD_DIRECTORY/Eval-Closure-$VERSION"
        WEB_SITE="http://search.cpan.org/~doy/Eval-Closure/"
      LICENSE[0]="ART"
         ENTERED=20180105
        KEYWORDS=""
           SHORT="Eval::Closure - safely and cleanly create closures via string eval"
cat << EOF
String eval is often used for dynamic code generation. For instance, Moose uses
it heavily, to generate inlined versions of accessors and constructors, which
speeds code up at runtime by a significant amount. String eval is not without
its issues however - it's difficult to control the scope it's used in (which
determines which variables are in scope inside the eval), and it's easy to miss
compilation errors, since eval catches them and sticks them in $@ instead.

This module attempts to solve these problems. It provides an eval_closure
function, which evals a string in a clean environment, other than a fixed list
of specified variables. Compilation errors are rethrown automatically.
EOF
